<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://wechaty.js.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://wechaty.js.org/" rel="alternate" type="text/html" /><updated>2021-08-25T07:00:25+00:00</updated><id>https://wechaty.js.org/feed.xml</id><title type="html">Wechaty</title><subtitle>Conversational RPA SDK for Chatbot Makers</subtitle><entry><title type="html">基于 wechaty 的 AR+LBS 漂流瓶轻社交游戏</title><link href="https://wechaty.js.org/2021/08/21/super-interstellar-terminal/" rel="alternate" type="text/html" title="基于 wechaty 的 AR+LBS 漂流瓶轻社交游戏" /><published>2021-08-21T00:00:00+00:00</published><updated>2021-08-21T00:00:00+00:00</updated><id>https://wechaty.js.org/2021/08/21/super-interstellar-terminal</id><content type="html" xml:base="https://wechaty.js.org/2021/08/21/super-interstellar-terminal/">&lt;p&gt;基于&lt;strong&gt;微信聊天的 结合增强现实技术（AR）+LBS(暂时基于图像）&lt;/strong&gt; 的&lt;strong&gt;星际漂流瓶&lt;/strong&gt; 的轻社交游戏。重新认识你身边的世界，或许我们早已与外星生命共同生活着。&lt;/p&gt;

&lt;h2 id=&quot;a-项目介绍&quot;&gt;A. 项目介绍&lt;/h2&gt;

&lt;h3 id=&quot;a1-项目模块&quot;&gt;A.1 项目模块：&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;项目由下面的模块组成，每个模块都可以单独使用，也可组合使用，如：直接按需就调用图像生成外星人、外星生物、外星植物、外星建筑&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;简要&lt;/th&gt;
      &lt;th&gt;具体描述&lt;/th&gt;
      &lt;th&gt;项目中的代码及模型&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;1.基于 LSGAN 的外星生物生成&lt;/strong&gt;，利用爬虫与 GAN 生成我们想要的东西的过程&lt;/td&gt;
      &lt;td&gt;请跳转到本页中的 C.1&lt;/td&gt;
      &lt;td&gt;Train.zip&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;2.快速调用PaddleSeg的cityscapes模型&lt;/strong&gt;，进行18类常见物体的分割&lt;/td&gt;
      &lt;td&gt;请跳转到本页中的 C.2&lt;/td&gt;
      &lt;td&gt;CityscapesModule.py +PetModel文件夹&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;3.OpenCV的seamlessClone实现图像融合&lt;/strong&gt;，呈现各种AR效果,遮挡关系等&lt;/td&gt;
      &lt;td&gt;请跳转到本页中的 C.3&lt;/td&gt;
      &lt;td&gt;alienPetModule.py&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;4.外星人换脸&lt;/strong&gt;，外星人脸与地球人脸融合效果的优化&lt;/td&gt;
      &lt;td&gt;请跳转到本页中的 C.4&lt;/td&gt;
      &lt;td&gt;alienHeadModule.py&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;5.YUV颜色空间实现颜色图案迁移&lt;/strong&gt;，基于CV技术生成外星植物&lt;/td&gt;
      &lt;td&gt;请跳转到本页中的 C.5&lt;/td&gt;
      &lt;td&gt;vegetateModule.py&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;6.PaddleHub的msgnet实现图像迁移&lt;/strong&gt;，基于深度学习生成类流沙或沙画效果&lt;/td&gt;
      &lt;td&gt;请跳转到本页中的 C.6&lt;/td&gt;
      &lt;td&gt;sandModule.py + msgnet文件夹&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;7.Wechaty漂流瓶游戏&lt;/strong&gt;，微信漂流瓶及通过开发者模式控制整个流程&lt;/td&gt;
      &lt;td&gt;请跳转到本页中的 D&lt;/td&gt;
      &lt;td&gt;bot文件夹&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/4front.webp&quot; alt=&quot;4front&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;a2-太空漂流信息&quot;&gt;A.2 太空漂流信息&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;你可能收到来自一个未知星域发过来的漂流瓶，你也可以把你想抒发的情感发向星际中&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;嗨，别来无恙啊，此刻的你是否有些孤独，别怕，此时此刻，在浩瀚宇宙中，总有与你相似的灵魂，你们或许来自不同的星球，有着不同的文明，但你们仍然可以通过太空漂流瓶去表达内心的情感，快来开启你的太空漂流瓶之旅吧。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用户可以在加本官方微信好友后，向本官方微信发出包含文本与图片的漂流瓶。也可以主动接收漂流瓶。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;甚至，在一个你意想不到的时刻会收到想象之外的漂流瓶信息。发送与接收漂流瓶都可以提升等级噢！&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a3-增强现实技术ar位置服务lbs的游戏&quot;&gt;A.3 增强现实技术（AR）+位置服务（LBS）的游戏&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;接收漂流瓶任务，或主动出击，寻找身边潜藏的外星人、外星生物（宠物）、外星植物、外星建筑&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;基于微信聊天中的图片及文本聊天。通过文本接受到任务或主动触发。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可能是让用户帮忙寻找它丢失的某个外星宠物（外星生物），或者帮它找到急需用于治疗的外星植物，也可能是让你帮忙找到正在被通缉的外星人囚犯。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a4-体验视频建议全屏观看&quot;&gt;A.4 体验视频：（建议全屏观看）&lt;/h3&gt;

&lt;div style=&quot;
    position: relative;
    padding-bottom: 70%;
    padding-top:30px;
    height:0;
    overflow:hidden;
&quot;&gt;
  &lt;iframe src=&quot;https://player.bilibili.com/player.html?bvid=BV1hL411E79M&amp;amp;high_quality=1&quot; allowfullscreen=&quot;&quot; webkitallowfullscreen=&quot;&quot; frameborder=&quot;0&quot; style=&quot;
      position: absolute;
      top:0;
      left:0;
      width:100%;
      height:100%;
    &quot;&gt;
&lt;/iframe&gt;

&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;欢迎小伙伴推荐地点及地点图片或直接加入本项目，可以先star或Fork跟踪更新进度&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;github地址：&lt;a href=&quot;https://github.com/kevinfu1717/SuperInterstellarTerminal&quot;&gt;https://github.com/kevinfu1717/SuperInterstellarTerminal&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;扫码加群，按群公告操作即可体验&lt;/strong&gt;      &lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/qr-code.webp&quot; alt=&quot;qr-code&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;b-故事背景&quot;&gt;B. 故事背景&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;地球并不只是人类的天下，其实有数万名外星人及其外星低等生物生活在我们当中，他们有的因为母星被毁有的因为星际战乱而选择到地球避难。&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;银河星际移民局则管理并协调着他们在地球的生活。借助超高级科技，他们隐藏原来的外观，装扮成是普通地球人，我们根本分辨不出来，说不定，站在你旁边的就是一位外星友人。&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;同时，他们也带来了外星的低等生物及外星植物，通过超科技把他们隐藏起来，装扮成地球物种或我们完全看不到。&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/bg.webp&quot; alt=&quot;bg&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;c-项目中的技术功能介绍&quot;&gt;C. 项目中的技术功能介绍&lt;/h2&gt;

&lt;h3 id=&quot;c1-ai寻找你身边的外星生物&quot;&gt;C.1 AI寻找你身边的外星生物&lt;/h3&gt;

&lt;h4 id=&quot;建立外星人图鉴让我们看一下ai预测的外星人形象是怎样的&quot;&gt;建立外星人图鉴，让我们看一下AI预测的外星人形象是怎样的&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;先看一下AI预测的外星生物矢量图：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/pets.webp&quot; alt=&quot;pets&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;a-训练素材&quot;&gt;a. 训练素材&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;从百度爬取“外星人”的图片，但因为外星人搜出来的图太杂乱。所以改变思路，用关键词“外星人 矢量”来进行搜索爬取。搜出来的外星人图片相对没那么杂乱。勉强可以用来训练。勉强是有1/5左右是白底，有1/5左右是PS中那种透明图的格子底图或水印的，有1/5是背景各种颜色的图，还有1/5是多个外星元素组成的图。大概数据见下图：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/pets2.webp&quot; alt=&quot;pets2&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;b-数据处理与增广&quot;&gt;b. 数据处理与增广&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;尝试过用midars模型或CV来提取单个外星生物，但效果都不是很好。所以，最终只使用水平翻转，增加了一倍的数量。尽管可以爬取来增加这个数量，但越到后面，爬取的图片质量越差。所以还是通过水平翻转来处理。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;c-模型&quot;&gt;c. 模型&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;训练文件：见项目中 Train压缩包下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TrainAlienPet.ipynb&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;模型文件：见项目中 Train压缩包下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generator0725.params&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;搜索了一下GAN的模型，结合可训练性与生成效果，选择了LSGAN。基于项目aistudio上“独楼望天涯”大佬的项目 &lt;a href=&quot;https://aistudio.baidu.com/aistudio/projectdetail/1936908&quot;&gt;https://aistudio.baidu.com/aistudio/projectdetail/1936908&lt;/a&gt;进行修改。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在其基础上，每个epoch执行更多的Generation，以及修改了超参数（ 偶尔判别器loss高时，会有些完全不像的图）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;训练过程：&lt;strong&gt;Epoch 0 ~ Epoch 999&lt;/strong&gt; 的LOSS及效果见下面动图：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/loss.webp&quot; alt=&quot;loss&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;具体训练项目地址见：&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://aistudio.baidu.com/aistudio/projectdetail/2210138&quot;&gt;Paddle2.0-通过LSGAN让我们看看AI预测的外星人长什么样子&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不足：&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;大概在200epochs就已经差不多，再训练到1000epochs反而效果还下降了。loss方面，判别器可以达到0.02，但生成器只能到0.8。这方面还可以优化&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;最终会有不少彩色的杂点&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;生成的外星生物矢量图有些还保留训练图的方格背景之类的。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;生成的外星生物可能有部分过拟合，为有些很向原来的。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;d-后处理&quot;&gt;d. 后处理&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;在叠加到现实图像中做AR效果时，使用cv处理优化这部分（具体见3-d中的描述）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为外星生物配上背景介绍，定义他们出现的位置，建立外星生物图鉴&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;生物图鉴：AI生成的外星生物&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/tujian.webp&quot; alt=&quot;tujian&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;c2-识别现场环境cityscapesmodulepy&quot;&gt;C.2 识别现场环境——CityscapesModule.py&lt;/h3&gt;

&lt;h4 id=&quot;a-模型&quot;&gt;a. 模型&lt;/h4&gt;

&lt;p&gt;PaddleSeg 中基于cityscapes数据集的SOTA模型&lt;/p&gt;

&lt;p&gt;PaddleSeg训练了一个在cityscapes数据集上SOTA的模型。却很低调，只是放在contrib中，仅有个英文的介绍。里面的介绍还主要针对训练的，如果只是想要体验SOTA的cityscapes的效果是怎样的却很麻烦。本项目中化简了相关的代码，一行代码体验cityscapes分割。效果真的对得起SOTA的！&lt;/p&gt;

&lt;h4 id=&quot;b-相关文件&quot;&gt;b. 相关文件&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;目录结构（单独使用本模块，只需修改&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CityscapesModule.py&lt;/code&gt;中的 im_path ）：&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── CityscapesModule.py
└── PetModel
    ├── modelCityscape.pdparams
    ├── pretrainedCityscape.pdparams
    └──mscale_ocr_cityscapes_autolabel_mapillary_ms_val.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretrainedCityscape.pdparams&lt;/code&gt;下载地址：&lt;a href=&quot;https://bj.bcebos.com/paddleseg/dygraph/cityscapes/ocrnet_hrnetw48_mapillary/pretrained.pdparams&quot;&gt;https://bj.bcebos.com/paddleseg/dygraph/cityscapes/ocrnet_hrnetw48_mapillary/pretrained.pdparams&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modelCityscape.pdparams&lt;/code&gt;下载地址：&lt;a href=&quot;https://bj.bcebos.com/paddleseg/dygraph/cityscapes/mscale_ocr_hrnetw48_cityscapes_autolabel_mapillary/model.pdparams&quot;&gt;https://bj.bcebos.com/paddleseg/dygraph/cityscapes/mscale_ocr_hrnetw48_cityscapes_autolabel_mapillary/model.pdparams&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mscale_ocr_cityscapes_autolabel_mapillary_ms_val.yml&lt;/code&gt; 为PaddleSeg模型的yml文件&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;c-功能作用&quot;&gt;c. 功能/作用&lt;/h4&gt;

&lt;p&gt;让AI能感知环境里有哪几样物品，同时可以定位到其在图片中的具体位置。具体识别的物品如下：&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;PS:注意真实返回的ID是从0开始的，所以是trainId-1&lt;/strong&gt;，如sky实际返回的id是10 not 11）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/sheet.webp&quot; alt=&quot;sheet&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;d-使用&quot;&gt;d. 使用&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;运行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CityscapesModule.py&lt;/code&gt;脚本,设置待处理图片的路径，将返回大小于原图片大小一样的二维数组pred，其取值是从0~18。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以拿这个二维数组作为mask，例如用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;np.where(mask == index, 1, 0)&lt;/code&gt;来截取自己感兴趣的区域，index取值为上表中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;实际返回ID&lt;/code&gt; ,也即 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trainID -1&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CityscapesModule.py&lt;/code&gt;中把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pred ×10&lt;/code&gt;后保存成图片，见右下图（图片像素的灰度值从0~180）。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/cityscapes.webp&quot; alt=&quot;cityscapes&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;c3-寻找隐藏在环境中的外星生物外星宠物alienpetmodulepy&quot;&gt;C.3 寻找隐藏在环境中的外星生物（外星宠物）——alienPetModule.py&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/pets3.webp&quot; alt=&quot;pets3&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;a-准备&quot;&gt;a. 准备&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;配合LSGAN生成的外星生物的形象，为起配置喜好，所在环境等，写入到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfigPet.py&lt;/code&gt;中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfigPet.py&lt;/code&gt;中每个dict就是一种外星生物，该外星生物的id就是那个dict的key。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfigPet.py&lt;/code&gt;中的areaIndex对应的就是cityScapes返回的物体ID，例如，areaIndex=10，则代表此生物是出现在天空中。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;b-作用&quot;&gt;b. 作用&lt;/h4&gt;

&lt;p&gt;实现对应位置的叠加AR效果。如：天空中出现飞在天上的外星生物，树丛中会出现喜欢在树上的草食性外星生物。&lt;/p&gt;

&lt;h4 id=&quot;c-步骤&quot;&gt;c. 步骤&lt;/h4&gt;

&lt;h5 id=&quot;c1-准备&quot;&gt;c.1. 准备&lt;/h5&gt;

&lt;p&gt;基于LSGAN生成的外星生物矢量图。配置其参数，如：名字、大小、常出现的位置，习性描述、是否需要遮罩等。&lt;/p&gt;

&lt;h5 id=&quot;c2-选择&quot;&gt;c.2. 选择&lt;/h5&gt;

&lt;p&gt;先判断alienIndex是0（随机生成），还是-1（不生成），或者是&amp;gt;0（生成id等于alienIndex的外星生物）。&lt;/p&gt;

&lt;h5 id=&quot;c3-定位&quot;&gt;c.3. 定位&lt;/h5&gt;

&lt;p&gt;基于分割模型得到的mask区域，按照外星生物可存在的位置判断是否出现外星生物，及其出现位置。具体见关键技术点说明。&lt;/p&gt;

&lt;h5 id=&quot;c4-合成&quot;&gt;c.4. 合成&lt;/h5&gt;

&lt;p&gt;根据外星生物的特性使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cv2.seamleClone&lt;/code&gt;，参数选用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MIXED_CLONE&lt;/code&gt;或&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NORMAL_CLONE&lt;/code&gt;。具体见关键技术点说明。&lt;/p&gt;

&lt;h4 id=&quot;d-关键技术点&quot;&gt;d. 关键技术点&lt;/h4&gt;

&lt;h5 id=&quot;d1-cv2seamlessclone三种图像合成效果&quot;&gt;d.1 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cv2.seamlessClone&lt;/code&gt;三种图像合成效果&lt;/h5&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 会把src图的边缘进行模糊化，同时整个src图的色彩融合到dst中-&amp;gt;需要src图较清晰，dst背景较简单，可以接受src图周边边缘模糊的场景
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seamlessClone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NORMAL_CLONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 基于透明度的融合，src图中白色的区域会显得透明度高，看起来叠加的颜色比较透-&amp;gt;适合dst背景较复杂，但对src图清晰度要求不高，src图背景是白色的场景
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seamlessClone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIXED_CLONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 会把src图变成灰度图合成到dst中-&amp;gt;暂时看不到什么好用途
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seamlessClone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MONOCHROME_TRANSFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;借用别人的图，懒得生成了，左中右分别是：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NORMAL_CLONE&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MIXED_CLONE&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONOCHROME_TRANSFER&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;简单背景：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/simple-clone.webp&quot; alt=&quot;simple-clone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;复杂背景：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/complex-clone.webp&quot; alt=&quot;complex-clone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;效果好坏于背景图dst及前景图src都有关系&lt;/p&gt;

&lt;h5 id=&quot;d2-结合mask的优化版seamlesclone图像合成效果代码见alienpetmodulepy中的maskofwhitebgroiareacheck&quot;&gt;d.2 结合mask的优化版seamlesClone图像合成效果——代码见alienPetModule.py中的maskOfWhiteBG()，roiAreaCheck()&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;把src的外星生物图转成HSV格式，通过V通道，V大于200得到二值化的mask。HSV的V分量可以当作是亮度，在本次LSGAN生成的外星人中基本都是白色底的，可以抠处白色底&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;二值化的图进行开运算。去除LSGAN中生成的一些彩色噪声点，得到外星生物的mask，宁愿漏也不要去多了。因为合成时有个渐变，自然就把杂点淡化了。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/binary.webp&quot; alt=&quot;binary&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;把2中的二值化图进行边缘裁切，使mask图的四个边都有白色区域接触。这可能是seamlessClone的一个bug，若白色区域不接触图像边缘，&lt;strong&gt;其合成时的位置是按白色区域的中心点位置，不是mask图像的中心点位置&lt;/strong&gt;，切记！&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;根据裁切后的mask，重新计算中心点左边center=(x,y)。seamlessClone的center参数是src的中心点在dst图中的位置。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;d3-结合cityscapes分割的ar定位代码见alienpetmodulepy中的erode2lefttoplefttop2center&quot;&gt;d.3 结合cityScapes分割的AR定位——代码见alienPetModule.py中的erode2LeftTop（），leftTop2Center()&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;利用cityScapes返回的pred图中，获取画面中某个物品的mask。利用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;np.where(pred==areaIndex, 1, 0)&lt;/code&gt;生成二值化mask。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;根据用户图片dst的大小，及外星宠物的scaleRatio参数，调整外星宠物图片的大小。大小设置为dst图像长边scaleRatio，再有一个（0.8~1）倍的随机&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;对二值化mask图4个边缘的值都设置0。相当于mask图边缘多了一个黑色的框，方便待会腐蚀时，可以从边缘也腐蚀。否则，贴着边缘值为1的点待会都不会倍腐蚀&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;以调整后的外星宠物图像的边长d，对二值化mask图像进行opencv的腐蚀操作。腐蚀后，值为1的点则为可选的外星宠物图像进行seamlessClone的center点。腐蚀相当于我们的卷积，当该点腐蚀后仍为1，则证明其腐蚀前周围值为1的点能组成一个d×d的形状&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/corrosion.webp&quot; alt=&quot;corrosion&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;若腐蚀后，mask图都为0，则缩小腐蚀的kernel为原来的0.6，再重复4的步骤。步骤4完成后没能找到mask中为1的点则证明，没有足够位置完全把外星宠物图像放进去，我们缩小要求，要求某区域只要有60%的外星宠物的大小则继续融合进去&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;若4或5步骤后，mask中有值为1的点，则满足条件,可进行图像合成&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;d4-前后关系&quot;&gt;d.4 前后关系&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;有外星人又则怎能少了外星飞碟呢。外星飞船要逼真需要又遮挡关系，我们可以利用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cityscapesModule&lt;/code&gt;识别出的天空区域。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一句代码实现遮挡：&lt;/p&gt;

    &lt;p&gt;【伪代码】 np.where(mask=天空的index, 已叠加飞船的图，原图）&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/sky.webp&quot; alt=&quot;sky&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;c4-外星人显形alienheadmodulepy&quot;&gt;C.4 外星人显形——alienHeadModule.py&lt;/h3&gt;

&lt;h4 id=&quot;a-模型-1&quot;&gt;a. 模型&lt;/h4&gt;

&lt;p&gt;Paddlehub landmark模型&lt;/p&gt;

&lt;p&gt;landmark的68个人脸关键点模型具体介绍请见官方介绍：&lt;a href=&quot;https://gitee.com/PaddlePaddle/PaddleHub/tree/release/v2.1/modules/image/keypoint&quot;&gt;https://gitee.com/PaddlePaddle/PaddleHub/tree/release/v2.1/modules/image/keypoint&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;b-作用-1&quot;&gt;b. 作用&lt;/h4&gt;

&lt;p&gt;实现外星人换脸&lt;/p&gt;

&lt;h4 id=&quot;c-步骤-1&quot;&gt;c. 步骤&lt;/h4&gt;

&lt;h5 id=&quot;c1-准备-1&quot;&gt;c.1. 准备&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;找到一张外星人正面的照片与侧面的照片，扣出其形象保存图片。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;我们需要手动用labelme的keypoint为其标上68个关键点，大概就好，不用太精确。landmark数据按labelme格式保存到json中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;配置外星人的人脸参数到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfigHead.py&lt;/code&gt;中。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/alien1.webp&quot; alt=&quot;alien1&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;c2-对齐&quot;&gt;c.2. 对齐&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;对用户发来的图片，利用PaddleHub的landmark模型获取图片中的人脸特征点。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;正脸使用正脸的外星人照片的，侧脸用侧脸的预处理照片。若角度太偏则不进行处理。然后，使用landmark中脸颊的特征点求中点进行人脸图像位置上的对齐。并根据用户图片的人脸对外星人人脸进行大小调整&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;c3-融合粘贴&quot;&gt;c.3. 融合粘贴&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;截取外星人人脸，生成一个上到下的渐透明的遮罩图。用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cv2.seamlessCloned&lt;/code&gt;的NORMAL_CLONE复制到原人脸位置，但因为seamlessClone没法调参数的，外星人形象融在背景里面，不太明显不清晰。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;截取外星人人脸及颈部及上半身，生成一个上到下的渐透明的遮罩图。用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cv2.addWeight&lt;/code&gt;把外星人脸与1中所述的人脸进行透明度融合。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/alien2.webp&quot; alt=&quot;alien2&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;d-关键技术点-1&quot;&gt;d. 关键技术点&lt;/h4&gt;

&lt;h5 id=&quot;d1-问题分析&quot;&gt;d.1 问题分析&lt;/h5&gt;

&lt;p&gt;直接把外星人脸贴到用户图上边缘会很硬，如上图中的左图。&lt;/p&gt;

&lt;h5 id=&quot;d2-单方向渐变遮罩&quot;&gt;d.2 单方向渐变遮罩&lt;/h5&gt;

&lt;p&gt;使用从上到下的遮罩，可以有效渐变过度到身体。上到下的渐变mask生成见&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVTools.py&lt;/code&gt;中的gradientMask()。只用上到下的渐变，是因为外星人头会比正常人头大，本身过渡要求不高，所以上，左，右方向的融合过渡，依靠seamlessClone则可较好处理。剩下 下 这个方向是连接颈部或身体的需要渐变遮罩过渡。（见下图）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/alien1.webp&quot; alt=&quot;alien3&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;d3-双重图片叠加融合&quot;&gt;d.3 双重图片叠加融合&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;只是使用seamlessClone融合，会因为seamlessClone算法影响，把贴上去的外星人图颜色变得较多，算法只为让其融合到附近环境。原图是这样的：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/alien4.webp&quot; alt=&quot;alien4&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cv2.seamlessClone&lt;/code&gt;没有参数调节，使得整个外星人头的颜色都变了。见下图左。   双重图片叠加融合，效果见下图右。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/alien5.webp&quot; alt=&quot;alien5&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;双重图片叠加融合步骤：（具体代码为项目中：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alienHeadModule.py&lt;/code&gt;)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;生成head的渐变mask。使用d2所述的方法生成头部的渐变遮罩。&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;hard paste head。使用直接粘贴替换的方式，把外星人的head粘贴到用户的图的适当位置。&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;生成Body的渐变mask。把外星人头及颈部或身体上半部 对齐head的位置，使用d2所述的方法生成mask。&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;seamlessClone Body。使用3所述的mask图，把外星人身体上半部seamlessClone到用户的图中，需要保证粘贴后头的位置是跟步骤2一样的。&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;合成。使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cv2.addWeight&lt;/code&gt;实现透明度叠加步骤2与步骤4的图。 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cv2.addWeighted(src1, alpha, src2, beta, gamma)&lt;/code&gt;，根据不同外星人的皮肤深浅调节alpha，beta。最终效果见上图。&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;c5-寻找生长在地球的外星植物vegetatemodulepy&quot;&gt;C.5 寻找生长在地球的外星植物——vegetateModule.py&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/vegetate1.webp&quot; alt=&quot;vegetate1&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;a-准备-1&quot;&gt;a. 准备&lt;/h4&gt;

&lt;p&gt;找一些外星植物的图片，实现非深度学习的基于&lt;strong&gt;图像技术&lt;/strong&gt;的颜色纹理迁移。也可以是一些想要的风格的图，如下图中的任意一种
&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/vegetate2.webp&quot; alt=&quot;vegetate2&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;b-作用-2&quot;&gt;b. 作用&lt;/h4&gt;

&lt;p&gt;把环境中的植物变换成外星风格的植物&lt;/p&gt;

&lt;h4 id=&quot;c-步骤-2&quot;&gt;c. 步骤&lt;/h4&gt;

&lt;h5 id=&quot;c1-准备-2&quot;&gt;c.1. 准备&lt;/h5&gt;

&lt;p&gt;基于这些外星植物，在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfigVegetae.py&lt;/code&gt;中配置其参数，如：名字、常出现的位置，习性描述等&lt;/p&gt;

&lt;h5 id=&quot;c2-选择-1&quot;&gt;c.2. 选择&lt;/h5&gt;

&lt;p&gt;先判断vegetateIndex是0（随机生成），还是-1（不生成），或者是&amp;gt;0（生成id等于vegetateIndex是0的外星植物）。&lt;/p&gt;

&lt;h5 id=&quot;c3-定位-1&quot;&gt;c.3. 定位&lt;/h5&gt;

&lt;p&gt;基于分割模型得到的mask区域，按照外星生物可存在的位置判断是否出现该外星植物，及其出现位置。&lt;/p&gt;

&lt;h5 id=&quot;c4-合成-1&quot;&gt;c.4. 合成&lt;/h5&gt;

&lt;p&gt;根据外星植物的特性使用yuv颜色通道合成。具体见关键技术点说明。&lt;/p&gt;

&lt;h4 id=&quot;d-关键技术点-2&quot;&gt;d. 关键技术点&lt;/h4&gt;

&lt;h5 id=&quot;d1-yuv颜色区间&quot;&gt;d.1 YUV颜色区间&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;比较熟悉CV的同志们可以忽略此节&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;我们使用CV的方法进行处理时，通常不会再RGB颜色空间处理，而是转到HLS/HSV 也有 YUV颜色空间进行处理。这样作的好处是 其中的H 通道在一定程度上可以表示其颜色。通过这样来选择特定的颜色，S代表饱和度，V代表亮度。而YUV中 Y是亮度，U,V分别是 蓝 红 通道。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;YUV具体介绍可见：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/95952096&quot;&gt;https://zhuanlan.zhihu.com/p/95952096&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;d2-yuv颜色融合&quot;&gt;d.2 YUV颜色融合&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;我们也可以通过Y通道融合亮度，保留外星的U,V通道，即保留其颜色。当两个图片融合时，通过调节融合的Y通道的权重，控制合成出来的颜色亮度。&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 把图片style，content转到yuv空间
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yuv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cvtColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COLOR_BGR2YUV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yuv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;yuv2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cvtColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COLOR_BGR2YUV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yuv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
&lt;span class=&quot;c1&quot;&gt;# 根据ratio这个比例来合成 style 与 content两张图
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ratio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ratio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'uint8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# hy = np.clip(hy, 0, 255)
&lt;/span&gt;  
&lt;span class=&quot;c1&quot;&gt;# 两张图进行合成
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dstack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cvtColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COLOR_YUV2BGR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;c6-寻找被外星人隐藏起来的外星建筑sandmodulepy&quot;&gt;C.6 寻找被外星人隐藏起来的外星建筑——sandModule.py&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/sand1.webp&quot; alt=&quot;sand1&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;a-准备-2&quot;&gt;a. 准备&lt;/h4&gt;

&lt;p&gt;使用Msgnet迁移训练的沙画模型，实现基于&lt;strong&gt;深度学习&lt;/strong&gt;的风格迁移。 大家可以对比一下5中的外星植物的效果，那是基于CV技术的迁移&lt;/p&gt;

&lt;h4 id=&quot;b-作用-3&quot;&gt;b. 作用&lt;/h4&gt;

&lt;p&gt;把环境中的建筑变成像流沙组合起来的建筑&lt;/p&gt;

&lt;h4 id=&quot;c-步骤-3&quot;&gt;c. 步骤&lt;/h4&gt;

&lt;h5 id=&quot;c1-定位&quot;&gt;c.1. 定位&lt;/h5&gt;

&lt;p&gt;基于分割模型得到的mask区域，定位areaIndex==2,即building的区域。&lt;/p&gt;

&lt;h5 id=&quot;c2-图像迁移&quot;&gt;c.2. 图像迁移&lt;/h5&gt;

&lt;p&gt;把建筑转成灰度图，然后用msgnet迁移成流沙的风格。&lt;/p&gt;

&lt;h3 id=&quot;c7-使用imggeneratemodule-建立alien-server或直接调用&quot;&gt;C.7 使用ImgGenerateModule 建立Alien Server或直接调用&lt;/h3&gt;

&lt;h4 id=&quot;a-直接调用函数&quot;&gt;a. 直接调用函数&lt;/h4&gt;

&lt;p&gt;ImgGenerateModule可以单独使用或&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.py&lt;/code&gt;也可单独建立flask的图像生成服务供其他用途使用&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;初始化函数定义各个模型文件夹及图片素材的位置&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;imgGenerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImgGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ymlPathSeg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'PetModel/mscale_ocr_cityscapes_autolabel_mapillary_ms_val.yml'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#cityscapes分割模型的yml
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;modelPathSeg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'PetModel/modelCityscape.pdparams'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#cityscapes分割模型文件
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;modelPathSand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'msgnet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#沙画模型文件夹
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;picPathHead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'HeadPic/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#外星人头素材
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;picPathPet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'PetPic/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#外星生物素材
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;picPathVeg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'VegPic'&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#外星植物及外星建筑素材
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;调用函数生成&lt;/p&gt;

    &lt;p&gt;输入是图片路径：&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;des&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imgGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dstPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alienHeadIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vegetateIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;environmentIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alienPetIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;输入直接是图片：&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;des&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imgGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runImg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alienHeadIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vegetateIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;environmentIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alienPetIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;参数说明&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;参数名&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;必选&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;类型&lt;/th&gt;
          &lt;th&gt;说明&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;img/dstPath&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;是&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;string&lt;/td&gt;
          &lt;td&gt;待处理图片或待处理图片的地址&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;alienHeadIndex&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;否&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;int&lt;/td&gt;
          &lt;td&gt;是否进行换外星人头，-1为不处理，0为随机，&amp;gt;0为指定index为该值的外星人&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;vegetateIndex&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;否&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;int&lt;/td&gt;
          &lt;td&gt;是否添加外星植物，-1为不处理，0为随机，&amp;gt;0为指定index为该值的外星植物&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;environmentIndex&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;否&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;int&lt;/td&gt;
          &lt;td&gt;是否生成外星建筑外墙，-1为不处理，&amp;gt;0为生成&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;alienPetIndex&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;否&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;int&lt;/td&gt;
          &lt;td&gt;是否进行添加外星生物，-1为不处理，0为随机，&amp;gt;0为指定index为该值的外星生物&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;返回说明&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;参数名&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;类型&lt;/th&gt;
          &lt;th&gt;说明&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;result_code&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;dict&lt;/td&gt;
          &lt;td&gt;{ 返回结果代号 ：返回结果描述}，result_code参数具体见代码中说明，200为正常生成&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;img&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;numpy array&lt;/td&gt;
          &lt;td&gt;生成的图片或原图片(没有适合的位置生成时返回原图片)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;dis&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;dict&lt;/td&gt;
          &lt;td&gt;包含生成外星人/生成外星植物/生成外星建筑/生成外星宠物的参数的字典. 没有进行处理则为空字典&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;b-建server访问图像生成接口-本项目中使用的方式&quot;&gt;b. 建server，访问图像生成接口 (本项目中使用的方式）&lt;/h4&gt;

&lt;p&gt;不确定什么原因，以前Wechaty都可以在AI Studio的脚本任务跑，现在好像不可以了，从AI Studio脚本任务无法访问外网的端口了，可以ping通外网。所以，需要另外找自己的主机作深度学习这部分的图片推理生成，因此直接把上述功能再弄到flask中，弄了个接口。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;接口代码见：项目中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.py&lt;/code&gt;脚本&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;接口文档说明见showdoc：&lt;a href=&quot;https://www.showdoc.com.cn/1525661816374166/7370335053618085&quot;&gt;https://www.showdoc.com.cn/1525661816374166/7370335053618085&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;并发问题：flask接口默认允许并发，即可能很短时间内或同一时间调用里面的函数的，但鉴于我们的运算都是GPU的，不支持并发调用。所以，使用了gevent来设置阻塞的服务。即会一个处理完再调用处理下一个，中间还没处理的会等待。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;c8-识别图像的拍摄位置&quot;&gt;C.8 识别图像的拍摄位置&lt;/h3&gt;

&lt;h4 id=&quot;a-前提条件需同时满足下面条件&quot;&gt;a. 前提条件（需同时满足下面条件）&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;用户是在微信中，用&lt;strong&gt;原图&lt;/strong&gt;发送照片给我们&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;照片拍照时，其拍照设置中打开了&lt;strong&gt;保存地理位置信息&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;b-背景情况介绍&quot;&gt;b. 背景情况介绍&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;若用户满足上述2条件，则保存的照片里将含有exif信息。该EXIF信息，可在Windows中图片的属性中看到，GPS，拍照日期等信息：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/location1.webp&quot; alt=&quot;location1&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;EXIF的详细介绍可见，这里不详细叙述了:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://www.360doc.com/content/18/0303/07/7793103_733844932.shtml&quot;&gt;http://www.360doc.com/content/18/0303/07/7793103_733844932.shtml&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;c-获取经纬度exifmodulepy&quot;&gt;c. 获取经纬度——exifModule.py&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;python中有pip库可以直接获取照片的exif信息， 具体代码可见项目工程中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exifModule.py&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;本脚本中提取了最关键的经度与纬度信息，还有拍照日期可供调用&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;d-获取具体位置geomodulepy&quot;&gt;d. 获取具体位置——geoModule.py&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;具体代码可见项目工程中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;geoModule.py&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;步骤：把获得的经纬度信息去请求开放的地图api，获取具体地址.这个方法的名称为：逆地址编码&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;横向比较了： 百度，腾讯，高德地图，发现高德给出的个人免费调用量有 3W/日，其他两家只有几k。最终选用了高德的api&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;高德api获取地址步骤（非常简单）：&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;序号&lt;/th&gt;
          &lt;th&gt;高德流程&lt;/th&gt;
          &lt;th&gt;备注&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;注册&lt;/td&gt;
          &lt;td&gt;需要支付宝扫码实名&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;新建应用&lt;/td&gt;
          &lt;td&gt;按默认点确定即可&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;复制那个应用的key进行调用&lt;/td&gt;
          &lt;td&gt;调用代码见&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;geoModule.py&lt;/code&gt;，请使用自己的gaode_key测试&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;详细图文描述可见：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/371682461&quot;&gt;https://zhuanlan.zhihu.com/p/371682461&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;d-上手及部署指南&quot;&gt;D. 上手及部署指南&lt;/h2&gt;

&lt;h3 id=&quot;d1-配置要求&quot;&gt;D.1 配置要求&lt;/h3&gt;

&lt;p&gt;图像部分，因为用了PaddleSeg需要一台6G显存以上的主机，4G显存的没测试过，可以尝试调小 ImgGeneratorModule 中的 inputSize, 在DL处理前先缩小图片。&lt;/p&gt;

&lt;h3 id=&quot;d2-部署方案&quot;&gt;D.2 部署方案&lt;/h3&gt;

&lt;p&gt;建议选择方案一&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;方案一：一台显存6G，内存16G电脑（部署整个项目）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;方案二：一台普通云端服务器（1核2G之类的）+ 一台有外网IP的显存6G，内存16G电脑(部署图像部分：ImgGenerateModule)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;方案三：一台有GPU的云端服务器&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;d3-模型下载&quot;&gt;D.3 模型下载&lt;/h3&gt;

&lt;p&gt;需下载以下模型：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;简化后的PadlleSeg的cityscapes的SOTA模型（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CityscapesModule.py&lt;/code&gt;需要）&lt;/p&gt;

    &lt;p&gt;AI Studio数据页：&lt;a href=&quot;https://aistudio.baidu.com/aistudio/datasetdetail/102892&quot;&gt;https://aistudio.baidu.com/aistudio/datasetdetail/102892&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;流沙效果/沙画效果模型（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sandModule.py&lt;/code&gt;需要）&lt;/p&gt;

    &lt;p&gt;AI Studio数据页：&lt;a href=&quot;https://aistudio.baidu.com/aistudio/datasetdetail/102698&quot;&gt;https://aistudio.baidu.com/aistudio/datasetdetail/102698&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PaddleSeg（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CityscapesModule.py&lt;/code&gt;需要）&lt;/p&gt;

    &lt;p&gt;AI Studio数据页：&lt;a href=&quot;https://aistudio.baidu.com/aistudio/datasetdetail/102136&quot;&gt;https://aistudio.baidu.com/aistudio/datasetdetail/102136&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;或直接去GitHub：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone https://github.com/PaddlePaddle/PaddleSeg&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;或者去Gitee：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone https://gitee.com/PaddlePaddle/PaddleSeg&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;生成外星人矢量图模型（非必需，若要自己新增生成外星生物才需要）&lt;/p&gt;

    &lt;p&gt;AI Studio数据页：&lt;a href=&quot;https://aistudio.baidu.com/aistudio/datasetdetail/103316&quot;&gt;https://aistudio.baidu.com/aistudio/datasetdetail/103316&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;d4-部署过程&quot;&gt;D.4 部署过程&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;申请Wechaty Token &lt;a href=&quot;https://wechaty.js.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Powered%20By-Wechaty-brightgreen.svg&quot; alt=&quot;Powered by Wechaty&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/wechaty/python-wechaty&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Wechaty-Python-blue&quot; alt=&quot;Wechaty in Python&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;具体请访问Wechaty官网: &lt;a href=&quot;https://wechaty.js.org/&quot;&gt;https://wechaty.js.org/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;快速上手&lt;/p&gt;

    &lt;p&gt;请参考&lt;a href=&quot;https://aistudio.baidu.com/aistudio/personalcenter/thirdview/638343&quot;&gt;@Lovely-Pig&lt;/a&gt;的文章: &lt;a href=&quot;https://aistudio.baidu.com/aistudio/projectdetail/1836012&quot;&gt;教你用AI Studio+Wechaty+阿里云白嫖一个智能微信机器人&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;云服务器&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;本项目用到了阿里云的云服务器ECS，链接: &lt;a href=&quot;https://www.aliyun.com/product/ecs&quot;&gt;云服务器ECS&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;购买实例后登录&lt;a href=&quot;https://ecs.console.aliyun.com&quot;&gt;控制台&lt;/a&gt;，实例名称和主机名可以自行更改，记住&lt;strong&gt;公网IP&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;有任何不明白的请访问: &lt;a href=&quot;https://help.aliyun.com/product/25365.html&quot;&gt;云服务器ECS官方文档&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;云数据库&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;本项目用到了阿里云的云数据库RDS MySQL版，链接: &lt;a href=&quot;https://www.aliyun.com/product/rds&quot;&gt;云数据库RDS MySQL版&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;购买实例后登录&lt;a href=&quot;https://rds.console.aliyun.com&quot;&gt;控制台&lt;/a&gt;，创建一个数据库，名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super-interstellar-terminal&lt;/code&gt; .&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;创建一个普通账号，授权数据库填写&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super-interstellar-terminal&lt;/code&gt;，权限为读写（DDL+DML），记住&lt;strong&gt;用户名&lt;/strong&gt;和&lt;strong&gt;密码&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;在左侧&lt;strong&gt;数据库连接&lt;/strong&gt;处找到外网地址，小本本记下来&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;设置白名单，将云服务器实例的&lt;strong&gt;公网IP&lt;/strong&gt;加入白名单&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;有任何不明白的请访问: &lt;a href=&quot;https://help.aliyun.com/product/26090.html&quot;&gt;云数据库RDS官方文档&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;云存储&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;本项目用到了阿里云的对象存储OSS，链接: &lt;a href=&quot;https://www.aliyun.com/product/oss&quot;&gt;对象存储OSS&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;开通后登录&lt;a href=&quot;https://oss.console.aliyun.com&quot;&gt;控制台&lt;/a&gt;，创建一个Bucket，名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super-interstellar-terminal&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;登录&lt;a href=&quot;https://ram.console.aliyun.com&quot;&gt;RAM控制台&lt;/a&gt;，创建一个用户，访问方式选择&lt;strong&gt;编程访问&lt;/strong&gt;，记住&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AccessKey ID&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AccessKey Secret&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;有任何不明白的请访问: &lt;a href=&quot;https://help.aliyun.com/product/31815.html&quot;&gt;云存储OSS官方文档&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;开启数据库server&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 以任何一种你喜欢❤的方式远程登陆到阿里云的云服务器&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 克隆本代码仓库&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/
git clone https://github.com/kevinfu1717/SuperInterstellarTerminal.git

&lt;span class=&quot;c&quot;&gt;# 安装MySQL客户端&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;mysql-client-core-8.0

&lt;span class=&quot;c&quot;&gt;# 开启数据库server&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/SuperInterstellarTerminal/bot/
python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; requirements.txt
&lt;span class=&quot;nb&quot;&gt;nohup &lt;/span&gt;python3 server/database.py &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;开启图像处理server&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 远程登陆到一台很牛逼的服务器（不是阿里云的云服务器）&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 克隆本代码仓库&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/
git clone https://github.com/kevinfu1717/SuperInterstellarTerminal.git

&lt;span class=&quot;c&quot;&gt;# 开启图像处理server&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/SuperInterstellarTerminal/
python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; requirements.txt
&lt;span class=&quot;nb&quot;&gt;nohup &lt;/span&gt;python3 app.py &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;设置环境变量&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OSS_ENDPOINT&lt;/code&gt;的设置可参考: &lt;a href=&quot;https://help.aliyun.com/document_detail/31837.html?spm=a2c4g.11186623.6.611.554e6d13isyAAt&quot;&gt;访问域名（Endpoint）&lt;/a&gt;&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WECHATY_PUPPET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wechaty-puppet-service&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WECHATY_PUPPET_SERVICE_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;your wechaty token&amp;gt;&quot;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# wechaty的token&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DB_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;your database user name&amp;gt;&quot;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 云数据库账号的用户名&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DB_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;your database password&amp;gt;&quot;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 云数据库账号的密码&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DB_DATABASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;your database name&amp;gt;&quot;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 云数据库的数据库名，填写为super-interstellar-terminal&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DB_SERVER_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;your database server host&amp;gt;&quot;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 开启数据库server的服务器地址，一般是云服务器的公网IP&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ACCESS_KEY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;your AccessKey ID&amp;gt;&quot;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# RAM用户的AccessKey ID&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ACCESS_KEY_SECRET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;your AccessKey Secret&amp;gt;&quot;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# RAM用户的AccessKey Secret&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OSS_BUCKET_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;your oss bucket name&amp;gt;&quot;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 云存储的Bucket，填写为super-interstellar-terminal&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OSS_ENDPOINT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;your oss endpoint&amp;gt;&quot;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 云存储的访问域名&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMG_SERVER_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;your img server host&amp;gt;&quot;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 开启图像处理server的服务器地址&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DEVELOPERS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;your developer cipher&amp;gt;&quot;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 给予开发者特权的暗号&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;运行bot&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/super-interstellar-terminal/bot/
python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; requirements.txt
&lt;span class=&quot;nb&quot;&gt;nohup &lt;/span&gt;python3 bot.py &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;e-总结&quot;&gt;E. 总结&lt;/h2&gt;

&lt;h3 id=&quot;e1-展望&quot;&gt;E.1 展望&lt;/h3&gt;

&lt;h4 id=&quot;a-让心在宇宙漂流&quot;&gt;a. 让心在宇宙漂流&lt;/h4&gt;

&lt;p&gt;此项目结合了轻社交的星际漂流瓶，让大家可以抒发一下想对着太空说的话。也可以惊喜地看到别人写的漂流瓶。&lt;/p&gt;

&lt;h4 id=&quot;b-来个更逼真的lbsar游戏&quot;&gt;b. 来个更逼真的LBS+AR游戏&lt;/h4&gt;

&lt;p&gt;后续希望可以从用户拍的图片获取到地点或经纬度，或者用户发送定位来，从而实现更准确的LBS定位。叠加上AI图像能力，说不定能比PokemonGo更棒噢！&lt;/p&gt;

&lt;p&gt;起码&lt;strong&gt;普通伊布是不应该在水面出现的噢 @任天堂&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-super-interstellar-terminal/last1.webp&quot; alt=&quot;last1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看到这个项目，要不要也一起合作来把AI融到游戏里啊 @任天堂 （JUST JOKING. DON’T TAKE IT SERIOUSELY.)&lt;/p&gt;

&lt;h4 id=&quot;c-来更多脑洞一起创作玩法与剧本吧&quot;&gt;c. 来更多脑洞一起创作玩法与剧本吧！&lt;/h4&gt;

&lt;p&gt;希望更多有兴趣的脑洞，一起想想我们可以怎么玩，让我们玩得更high一点吧！&lt;/p&gt;

&lt;h3 id=&quot;e2-期盼&quot;&gt;E.2 期盼&lt;/h3&gt;

&lt;p&gt;希望更多小伙伴能贡献一下自己的脑洞，基于此项目，觉得还可以优化的游戏方式或游戏剧本。希望留言或评论。感谢！&lt;/p&gt;

&lt;p&gt;希望小伙伴们觉得此项目不错的&lt;strong&gt;点个赞（Star）和Fork&lt;/strong&gt;。能从头看到这里的很不容易了。非常感谢！！&lt;/p&gt;

&lt;h3 id=&quot;e3-reference参考内容&quot;&gt;E.3 Reference/参考内容&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://account.aliyun.com&quot;&gt;阿里云官网&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://wechaty.js.org&quot;&gt;Wechaty官网&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/wechaty/python-wechaty&quot;&gt;python-wechaty&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/wechaty/python-wechaty-getting-started&quot;&gt;python-wechaty-getting-started&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://aistudio.baidu.com/aistudio/projectdetail/1836012&quot;&gt;教你用AI Studio+Wechaty+阿里云白嫖一个智能微信机器人&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://https://aistudio.baidu.com/aistudio/projectdetail/1936908&quot;&gt;通过LSGAN以及WGAN-GP实现128*128大小的喀纳斯风景图片&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://https://aistudio.baidu.com/aistudio/projectdetail/2210138&quot;&gt;Paddle2.0-通过LSGAN让我们看看AI预测的外星人长什么样子&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;e4-致谢&quot;&gt;E.4 致谢&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;感谢百度爸爸的算力及技术支持&lt;/li&gt;
  &lt;li&gt;感谢Wechaty与Mixlabs&lt;/li&gt;
  &lt;li&gt;感谢Reference中列到的所有作者&lt;/li&gt;
  &lt;li&gt;感谢其中用到的所有开源项目的作者及维护者&lt;/li&gt;
  &lt;li&gt;感谢Teammate&lt;a href=&quot;https://github.com/Lovely-Pig&quot;&gt;@Lovely-Pig&lt;/a&gt;，感谢过程中所有提供鼓励与帮助的百度人员&lt;/li&gt;
  &lt;li&gt;致敬为拓展人类的宇宙梦而奋斗的所有技术工作者 Respect！!!&lt;/li&gt;
&lt;/ul&gt;</content><author><name>kevinfu1717</name></author><category term="article" /><category term="blog" /><category term="ar" /><category term="game" /><category term="introduction" /><summary type="html">基于微信聊天的 结合增强现实技术（AR）+LBS(暂时基于图像） 的星际漂流瓶 的轻社交游戏。重新认识你身边的世界，或许我们早已与外星生命共同生活着。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2021/08-super-interstellar-terminal/title.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2021/08-super-interstellar-terminal/title.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">GSoD’21 Eighth Meeting</title><link href="https://wechaty.js.org/2021/08/15/gsod-2021-eighth-meeting/" rel="alternate" type="text/html" title="GSoD’21 Eighth Meeting" /><published>2021-08-15T00:00:00+00:00</published><updated>2021-08-15T00:00:00+00:00</updated><id>https://wechaty.js.org/2021/08/15/gsod-2021-eighth-meeting</id><content type="html" xml:base="https://wechaty.js.org/2021/08/15/gsod-2021-eighth-meeting/">&lt;h2 id=&quot;google-season-of-docs21-eighth-meeting&quot;&gt;Google Season of Docs’21 Eighth meeting&lt;/h2&gt;

&lt;h3 id=&quot;meeting-summary&quot;&gt;Meeting Summary&lt;/h3&gt;

&lt;p&gt;It was the eighth meeting of the GSoD’21 participants. Firstly every participant gave one’s weekly summary and informed the community
 about their plans for the upcoming week, volunteers and tech writers discussed while tech writers were giving their week summaries.
  Later we discussed comments and questions of the participants, and they all were regarding getting reviews, feedback, &amp;amp; help, and
   at last, we took a lovely group photo. In the end I would like to stress upon the need of faster reviewal and merging of the PRs,
    after listening everyone at the meet.&lt;/p&gt;

&lt;div style=&quot;
    position: relative;
    padding-bottom: 56.25%;
    padding-top:30px;
    height:0;
    overflow:hidden;
&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube.com/embed/zLtLp5i0MD8&quot; allowfullscreen=&quot;&quot; webkitallowfullscreen=&quot;&quot; frameborder=&quot;0&quot; style=&quot;
      position: absolute;
      top:0;
      left:0;
      width:100%;
      height:100%;
    &quot;&gt;
&lt;/iframe&gt;

&lt;/div&gt;

&lt;h3 id=&quot;attendees&quot;&gt;Attendees&lt;/h3&gt;

&lt;p&gt;Total 10 attendees attended the meeting. They are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rohitesh Jain, Volunteer (UTC + 5:30)&lt;/li&gt;
  &lt;li&gt;Sajen Sarvajith, Reconstruct Landing page writer (UTC + 5:30)&lt;/li&gt;
  &lt;li&gt;Abhishek Jaiswal, How-to-guide section writer (UTC + 05:30)&lt;/li&gt;
  &lt;li&gt;Mukosa Joseph Mawa, Introductions and Explanations section writer (UTC +03:00)&lt;/li&gt;
  &lt;li&gt;Rajiv Ranjan Singh, Improve the gRPC and OpenAPI ecosystem writer, rajivperfect007@gmail.com, (UTC+05:30)&lt;/li&gt;
  &lt;li&gt;Shraddha, Improve References section writer (UTC + 5:30)&lt;/li&gt;
  &lt;li&gt;Shwetal Soni, Create easy to learn tutorials for beginners users writer (UTC +05:30)&lt;/li&gt;
  &lt;li&gt;Vasvi Sood, How to guides, contactvasvisood@gmail.com writer (UTC + 5:30)&lt;/li&gt;
  &lt;li&gt;Chris Estepa,  Introduction and Explanations sections writer (UTC +08:00)&lt;/li&gt;
  &lt;li&gt;Soumi Bardhan, Improve References section writer (UTC + 5:30)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note: Meeting started on schedule and Simin, Souvik, and Arnab Saha weren’t able to make it up to the meeting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-gsod-2021-eighth-meeting/gsod-eighth-meeting.webp&quot; alt=&quot;Google Season of Docs 2021: Wechaty GSoD'21 Group Photo&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;agendas&quot;&gt;Agendas&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/zLtLp5i0MD8&quot;&gt;00:00&lt;/a&gt; 0. Introduction &amp;amp; Welcome&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/zLtLp5i0MD8?t=61&quot;&gt;01:01&lt;/a&gt; 1. Discussion with Tutorials team&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/zLtLp5i0MD8?t=271&quot;&gt;04:31&lt;/a&gt; 2. Discussion with Introduction and explanation team&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/zLtLp5i0MD8?t=472&quot;&gt;07:52&lt;/a&gt; 3. Discussion with Landing page team&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/zLtLp5i0MD8?t=625&quot;&gt;10:25&lt;/a&gt; 4. Discussion with References section team&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/zLtLp5i0MD8?t=677&quot;&gt;11:17&lt;/a&gt; 5. Discussion with gRPC team&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/zLtLp5i0MD8?t=737&quot;&gt;12:17&lt;/a&gt; 6. Questions/comments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can learn more from our &lt;a href=&quot;https://docs.google.com/document/d/1fVCk8qRYc4RKGMf2UY5HOe07hEhPUOpGC34v88GEFJg/edit#heading=h.edr3nzd8l43b&quot;&gt;meeting notes&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;meeting-outcomes&quot;&gt;Meeting Outcomes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The community got to know about the progress and plans of the members&lt;/li&gt;
  &lt;li&gt;Community got to know the follow-up actions for the mentors and volunteers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;meeting-follow-ups&quot;&gt;Meeting Follow-ups&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Merge PRs in this &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/issues/1056&quot;&gt;list&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Tutorials team is in stalemate position, as they await for these issues to be resolved, &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/issues/1200&quot;&gt;#1200&lt;/a&gt;,
&lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/issues/1199&quot;&gt;1199&lt;/a&gt;, &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/issues/1193&quot;&gt;1193&lt;/a&gt;,
&lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/issues/1176&quot;&gt;1176&lt;/a&gt;, &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/issues/1119&quot;&gt;1119&lt;/a&gt;, and apart from this,
they need answers to some questions in &lt;a href=&quot;https://www.google.com/url?q=https://github.com/wechaty/wechaty.js.org/issues/1133&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1629112006415252&amp;amp;usg=AOvVaw3FSZMDamAkYDe_QH7hv3LF&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Create tutorial pages for some of the bots mentioned on the &lt;a href=&quot;https://wechaty.js.org/docs/showcases/&quot;&gt;Showcases&lt;/a&gt; page (need feedback from the community members). The introduction team has already mentioned these bots &lt;a href=&quot;https://wechaty.js.org/docs/showcases/osschat-bot/&quot;&gt;here&lt;/a&gt;. Is it required to be added in tutorials also&lt;/li&gt;
  &lt;li&gt;Merge &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/pull/865&quot;&gt;#865&lt;/a&gt; as it blocking progress of the Reference teams&lt;/li&gt;
  &lt;li&gt;Review upon landing page video&lt;/li&gt;
  &lt;li&gt;How to guides, gRPC, and Introduction teams are preparing their final project reports and expecting faster reviews on their PRs&lt;/li&gt;
&lt;/ul&gt;</content><author><name>rohitesh-kumar-jain</name></author><category term="gsod" /><category term="google" /><category term="gsod" /><category term="event" /><category term="gsod-2021" /><category term="2021" /><category term="zoom" /><category term="docs" /><summary type="html">Google Season of Docs’21 Eighth meeting</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2021/08-gsod-2021-eighth-meeting/gsod-eighth-meeting.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2021/08-gsod-2021-eighth-meeting/gsod-eighth-meeting.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Wechaty卡通P图插件，18行代码帮你实现变脸功能</title><link href="https://wechaty.js.org/2021/08/13/wechaty-face-carton/" rel="alternate" type="text/html" title="Wechaty卡通P图插件，18行代码帮你实现变脸功能" /><published>2021-08-13T00:00:00+00:00</published><updated>2021-08-13T00:00:00+00:00</updated><id>https://wechaty.js.org/2021/08/13/wechaty-face-carton</id><content type="html" xml:base="https://wechaty.js.org/2021/08/13/wechaty-face-carton/">&lt;p&gt;Wechaty 人像转换插件，让你的 Wechaty 机器人实现照片卡通化，年龄变化，性别变化等功能。之前有看到过一些机器学习视频，可以把照片漫画化，感觉很有意思，就想着能不能结合 Wechaty 做一个可以自动返回动漫化照片的机器人。经过一番资料查找，发现腾讯有个人脸变换的功能，经过测试后，发现就是我想要的功能，而且效果还不错，关键是每个月有 1000 次的免费额度，这就很香了。三种转换模式就是 3000 次，白嫖不香么 😏，白嫖腾讯这就更香了，哈哈。&lt;/p&gt;

&lt;p&gt;如果你说你的微信没法登陆网页版微信，没关系&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wechaty-puppet-wechat&lt;/code&gt;协议是基于 UOS 桌面版的，新账号也可以用的。&lt;/p&gt;

&lt;h2 id=&quot;实现功能&quot;&gt;实现功能：&lt;/h2&gt;

&lt;p&gt;私聊和群内都可以实现照片特效&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;多轮交互式对话实现
    &lt;ul&gt;
      &lt;li&gt;人脸照片动漫化&lt;/li&gt;
      &lt;li&gt;人脸年龄变化&lt;/li&gt;
      &lt;li&gt;人脸性别转换&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;效果展示&quot;&gt;效果展示&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-wechaty-face-carton/picall.webp&quot; alt=&quot;效果展示&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;准备腾讯云账号&quot;&gt;准备腾讯云账号&lt;/h2&gt;

&lt;h3 id=&quot;开通照片转换功能&quot;&gt;开通照片转换功能&lt;/h3&gt;

&lt;p&gt;登录&lt;a href=&quot;https://curl.qcloud.com/ZtRitpvH&quot;&gt;腾讯云&lt;/a&gt;账号，没有就直接 QQ 登录，直接点击管理控制台开通即可，不用付费，也不用选资源包，开通后自动有每个月 1000 次的免费额度，如果自己和朋友玩完全足够了。如果你是想活跃社群或者土豪，就随便充值了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-wechaty-face-carton/tencent.webp&quot; alt=&quot;腾讯云&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;获取腾讯的-secretid-和-secretkey&quot;&gt;获取腾讯的 secretid 和 secretkey&lt;/h3&gt;

&lt;p&gt;访问此页面&lt;a href=&quot;https://console.cloud.tencent.com/cam/capi&quot;&gt;https://console.cloud.tencent.com/cam/capi&lt;/a&gt;获取你的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secretid&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secretkey&lt;/code&gt;,配置插件的时候需要用的到&lt;/p&gt;

&lt;h2 id=&quot;使用步骤&quot;&gt;使用步骤&lt;/h2&gt;

&lt;h3 id=&quot;1初始化项目&quot;&gt;1、初始化项目&lt;/h3&gt;

&lt;p&gt;node环境需要自己配置一下，node&amp;gt;=14，。新建一个文件夹&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;face-carton&lt;/code&gt;，在文件夹内部执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm init&lt;/code&gt;，一路回车即可&lt;/p&gt;

&lt;h3 id=&quot;2安装头像转化插件和-wechaty&quot;&gt;2、安装头像转化插件和 Wechaty&lt;/h3&gt;

&lt;p&gt;这里说明一下，头像转化插件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wechaty-face-carton&lt;/code&gt;就是我这次做的主要功能，已经开源在&lt;a href=&quot;https://github.com/leochen-g/wechaty-face-carton&quot;&gt;github&lt;/a&gt;，由于已经发布到npm，所以这里你只需要安装就可以使用了，对于不关心代码的童鞋，直接安装使用就行了。如果想知道代码怎么实现的，可以到github仓库查看一下源码。&lt;/p&gt;

&lt;p&gt;配置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt; 源为淘宝源（重要，因为需要安装 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chromium&lt;/code&gt;，不配置的话下载会失败或者速度很慢，因为这个玩意 140M 左右）&lt;/p&gt;

&lt;div class=&quot;language-terminal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;npm config set registry https://registry.npm.taobao.org
npm config set disturl https://npm.taobao.org/dist
npm config set puppeteer_download_host https://npm.taobao.org/mirrors

npm install wechaty wechaty-face-carton wechaty-puppet-wechat --save
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3主要代码不超过20行&quot;&gt;3、主要代码（不超过20行）&lt;/h3&gt;

&lt;p&gt;index.js&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Wechaty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;wechaty&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WechatyFaceCartonPlugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;wechaty-face-carton&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;wechat-carton&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Wechaty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;puppet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;wechaty-puppet-wechat&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;bot&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;WechatyFaceCartonPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;maxuser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 支持最多多少人进行对话，建议不要设置太多，否则占用内存会增加&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;secretId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;腾讯secretId&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 腾讯secretId&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;腾讯secretKey&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 腾讯secretKey&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;allowUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Leo_chen&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 允许哪些好友使用人像漫画化功能，为空[]代表所有人开启&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;allowRoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;测试1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 允许哪些群使用人像漫画化功能，为空[]代表不开启任何一个群&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;quickModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 快速体验模式 默认关闭 开启后可直接生成二维码扫描体验，如果自己代码有登录逻辑可以不配置此项&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tipsword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;卡通&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 私聊发送消息，触发照片卡通化提示 如果直接发送图片，默认进入图片卡通化功能，不填则当用户初次发送文字消息时不做任何处理&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;参数说明&quot;&gt;参数说明&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;参数名&lt;/th&gt;
      &lt;th&gt;必填&lt;/th&gt;
      &lt;th&gt;默认值&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;maxuser&lt;/td&gt;
      &lt;td&gt;否&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;支持最多多少人进行对话，建议不要设置太多，否则占用内存会增加&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;secretId:&lt;/td&gt;
      &lt;td&gt;是&lt;/td&gt;
      &lt;td&gt;’’&lt;/td&gt;
      &lt;td&gt;腾讯 secretId&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;secretKey&lt;/td&gt;
      &lt;td&gt;是&lt;/td&gt;
      &lt;td&gt;’’&lt;/td&gt;
      &lt;td&gt;腾讯 secretKey&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;allowUser&lt;/td&gt;
      &lt;td&gt;否&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;允许哪些好友使用人像漫画化功能，为空[]代表所有人开启&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;allowRoom&lt;/td&gt;
      &lt;td&gt;否&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;允许哪些群使用人像漫画化功能，为空[]代表不开启任何一个群&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;quickModel&lt;/td&gt;
      &lt;td&gt;否&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;快速体验模式 默认关闭 开启后可直接生成二维码扫描体验，如果自己代码有登录逻辑可以不配置此项，如果是单独使用此插件，建议开启&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tipsword&lt;/td&gt;
      &lt;td&gt;否&lt;/td&gt;
      &lt;td&gt;‘卡通’&lt;/td&gt;
      &lt;td&gt;私聊发送消息，触发照片卡通化提示。如果直接发送图片，默认进入图片卡通化功能，不填则当用户初次发送文字消息时不做任何处理，建议填写触发关键词&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;4运行&quot;&gt;4、运行&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;扫码登录后，给小助手发送图片，即可转化图片，对于不能转化的图片，小助手会给出原因&lt;/p&gt;

&lt;h2 id=&quot;docker运行&quot;&gt;docker运行&lt;/h2&gt;

&lt;h3 id=&quot;1新建dockerfile&quot;&gt;1、新建Dockerfile&lt;/h3&gt;

&lt;p&gt;如果遇到过多的环境问题让你非常苦恼，你也可以在以上第三步完成后，根目录新建一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;文件，里面填入内容，对！就一行就行！&lt;/p&gt;

&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; wechaty/onbuild&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2build镜像&quot;&gt;2、build镜像&lt;/h3&gt;

&lt;p&gt;完成后就可以直接build镜像&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; wechaty-carton &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3运行镜像&quot;&gt;3、运行镜像&lt;/h3&gt;

&lt;p&gt;build完成后就可以直接run后扫码了&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run wechaty-carton
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;注意&quot;&gt;注意&lt;/h2&gt;

&lt;p&gt;要注意一下，不要把额度用超了，用超了就不能用了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;历史文章&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wechaty.js.org/2020/05/31/wechaty-web-panel-plugin/&quot;&gt;wechaty-web-panel可视化插件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wechaty.js.org/2019/06/21/three-step-get-girlfriend/&quot;&gt;三步教你用Node做一个微信脱单神器，小白可上手&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wechaty.js.org/2021/04/13/wechaty-uos-web/&quot;&gt;重磅：使用UOS微信桌面版协议登录，wechaty免费版web协议重放荣光&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;作者: &lt;a href=&quot;https://github.com/leochen-g/&quot;&gt;Leo_chen&lt;/a&gt;，全栈工程师，喜欢使用node做各种项目&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>leochen-g</name></author><category term="article" /><category term="code" /><category term="face-carton" /><category term="plugin" /><summary type="html">Wechaty 人像转换插件，让你的 Wechaty 机器人实现照片卡通化，年龄变化，性别变化等功能。之前有看到过一些机器学习视频，可以把照片漫画化，感觉很有意思，就想着能不能结合 Wechaty 做一个可以自动返回动漫化照片的机器人。经过一番资料查找，发现腾讯有个人脸变换的功能，经过测试后，发现就是我想要的功能，而且效果还不错，关键是每个月有 1000 次的免费额度，这就很香了。三种转换模式就是 3000 次，白嫖不香么 😏，白嫖腾讯这就更香了，哈哈。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2021/08-wechaty-face-carton/main.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2021/08-wechaty-face-carton/main.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The community matrix server is online!</title><link href="https://wechaty.js.org/2021/08/12/the-matrix-server-of-wechaty/" rel="alternate" type="text/html" title="The community matrix server is online!" /><published>2021-08-12T00:00:00+00:00</published><updated>2021-08-12T00:00:00+00:00</updated><id>https://wechaty.js.org/2021/08/12/the-matrix-server-of-wechaty</id><content type="html" xml:base="https://wechaty.js.org/2021/08/12/the-matrix-server-of-wechaty/">&lt;h2 id=&quot;about-matrix&quot;&gt;About Matrix&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://matrix.org/&quot;&gt;Matrix&lt;/a&gt; is a secure and distributed open source chat network that can provide us with communication functions similar to most social software. With complete message encryption, identity authentication and other security functions , Matrix also supports cross-server communication; At the same time, the Matrix community also provides multiple sets of clients, as well as plug-ins such as video chat, voice chat, SSO, system monitor, and user management. Matrix is a powerful open source social server, which is very suitable as a communication tool for the open source community.&lt;/p&gt;

&lt;h2 id=&quot;the-community-matrix-server-is-online&quot;&gt;The community matrix server is online&lt;/h2&gt;

&lt;p&gt;Thanks to Mr. Eric Migicovsky (the founder of &lt;a href=&quot;https://www.beeper.com/&quot;&gt;Beeper.com&lt;/a&gt;) for his support and sponsorship, the Matrix server of the Wechaty community has been launched on August 12, 2021, mainly for community members and Wechaty users communicate online.&lt;/p&gt;

&lt;p&gt;The server currently supports github account login (recommended), opens the invitation-free registration function, provides basic chat functions and voice and video conversation functions, and supports communication with other matrix server accounts.&lt;/p&gt;

&lt;p&gt;The Matrix server address is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;matrix.wechaty.tk&lt;/code&gt;, it is recommended to access through the &lt;a href=&quot;https://matrix.org/docs/projects/try-matrix-now.html#clients&quot;&gt;matrix client&lt;/a&gt; such as &lt;a href=&quot;https://element.io/get-started/&quot;&gt;element&lt;/a&gt;, you can also log in directly through the &lt;a href=&quot;https://element.wechaty.tk/#/login&quot;&gt;web client&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Welcome everyone to pay attention to the &lt;a href=&quot;https://github.com/wechaty/matrix-appservice-wechaty&quot;&gt;matrix-appservice-wechaty project&lt;/a&gt; of our community, this project can help users accept the message from various social applications (such as WeChat, Wecom, Lark, etc.) supported by wechaty in a private matrix server， can currently be quickly deployed through the scripts on &lt;a href=&quot;https://github.com/lprintf/easy-matrix-wechaty&quot;&gt;easy-matrix-wechaty project&lt;/a&gt;. We will take every issue raised on these projects seriously. You are also welcome to pay attention to the &lt;a href=&quot;https://www.beeper.com/&quot;&gt;Beeper.com&lt;/a&gt; application, which supports receiving messages from common social applications on the market (such as Whatsapp, Facebook, etc.) in one application.&lt;/p&gt;

&lt;h2 id=&quot;matters-needing-attention&quot;&gt;Matters needing attention&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The home room of the wechaty community is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#home:wechaty.tk&lt;/code&gt;, welcome the users from other matrix server to join it;&lt;/li&gt;
  &lt;li&gt;The server does not enable Google human verification, please do not use robots to frequently request;&lt;/li&gt;
  &lt;li&gt;The server is prohibited from being used for illegal purposes, and the community reserves the right to monitor unencrypted chat rooms;&lt;/li&gt;
  &lt;li&gt;The community will warn or ban users who violate the rules.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;matrix简介&quot;&gt;Matrix简介&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://matrix.org/&quot;&gt;Matrix&lt;/a&gt;是一套安全的分布式的开源聊天网络，可以为我们提供和大多数社交软件类似的通讯功能，拥有完善的消息加密，身份认证等安全功能，支持跨服务器通讯；同时Matrix社区还提供了多套客户端，以及视频、语音聊天，第三方登录，系统监控，用户管理等插件。Matrix是一套功能强大的开源社交服务器，很适合作为开源社区的通讯工具。&lt;/p&gt;

&lt;h2 id=&quot;社区matrix服务器的上线&quot;&gt;社区Matrix服务器的上线&lt;/h2&gt;

&lt;p&gt;感谢Eric Migicovsky(the founder of &lt;a href=&quot;https://www.beeper.com/&quot;&gt;Beeper.com&lt;/a&gt;)的赞助，Wechaty社区的Matrix服务器已在2021年8月12号正式上线，主要供社区成员及wechaty使用者线上交流沟通使用。&lt;/p&gt;

&lt;p&gt;该服务器目前支持github账号登录（推荐方式），开放免邀请的注册功能，提供基本聊天功能和语音、视频会话功能，支持与其他matrix服务器的账号进行交流。&lt;/p&gt;

&lt;p&gt;该Matrix服务器地址为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;matrix.wechaty.tk&lt;/code&gt;，推荐通过&lt;a href=&quot;https://matrix.org/docs/projects/try-matrix-now.html#clients&quot;&gt;matrix客户端&lt;/a&gt;如&lt;a href=&quot;https://element.io/get-started&quot;&gt;element&lt;/a&gt;访问,也可通过&lt;a href=&quot;https://element.wechaty.tk/#/login&quot;&gt;网页客户端&lt;/a&gt;直接登录。&lt;/p&gt;

&lt;p&gt;欢迎大家关注社区的&lt;a href=&quot;https://github.com/wechaty/matrix-appservice-wechaty&quot;&gt;matrix-appservice-wechaty项目&lt;/a&gt;,该项目可帮助用户在私有matrix服务器中接受各种wechaty能支持的应用的消息（如：微信，企业微信，飞书等），目前可通过&lt;a href=&quot;https://github.com/lprintf/easy-matrix-wechaty&quot;&gt;easy-matrix-wechaty项目&lt;/a&gt;中的脚本快速部署体验。我们会认真对待大家在这些项目中提出的每一个issue。也欢迎大家关注&lt;a href=&quot;https://www.beeper.com/&quot;&gt;Beeper.com&lt;/a&gt;应用，支持在一个应用内接收市面上常见应用的消息（如：Whatsapp，Facebook等）。&lt;/p&gt;

&lt;h2 id=&quot;注意事项&quot;&gt;注意事项&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;社区公共聊天室账号是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#home:wechaty.tk&lt;/code&gt;，欢迎其他matrix服务器的用户加入我们；&lt;/li&gt;
  &lt;li&gt;为方便境内网络环境访问，该服务器未开启Google人类验证，请勿使用机器人频繁请求；&lt;/li&gt;
  &lt;li&gt;该服务器禁止用于非法用途，社区保留对未加密聊天室的监控权利；&lt;/li&gt;
  &lt;li&gt;社区会对违规用户进行警告或封号处理。&lt;/li&gt;
&lt;/ul&gt;</content><author><name>lprintf</name></author><category term="announcement" /><category term="matrix" /><summary type="html">About Matrix</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2021/08-the-matrix-server-of-wechaty/wechaty-matrix.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2021/08-the-matrix-server-of-wechaty/wechaty-matrix.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Docker Open Source Program ❤️ Wechaty</title><link href="https://wechaty.js.org/2021/08/10/docker-open-source-program/" rel="alternate" type="text/html" title="Docker Open Source Program ❤️ Wechaty" /><published>2021-08-10T00:00:00+00:00</published><updated>2021-08-10T00:00:00+00:00</updated><id>https://wechaty.js.org/2021/08/10/docker-open-source-program</id><content type="html" xml:base="https://wechaty.js.org/2021/08/10/docker-open-source-program/">&lt;p&gt;In November, 2020, Docker announced the launch of a special program to expand our support for Open Source projects that use Docker. The eligible projects that meet the program’s requirements (ie. they must be open source and non-commercial) can request to have their respective OSS namespaces allowlisted and see their data-storage and data-egress restrictions lifted.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tweet: Docker has created a special program for Open Source projects to get continued free access and freedom from restrictions for their communities and their users. (&lt;a href=&quot;https://twitter.com/Docker/status/1323391404551393280&quot;&gt;link&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;open-source-project-qualification-criteria&quot;&gt;Open Source Project Qualification Criteria&lt;/h2&gt;

&lt;p&gt;To qualify for the Open Source Program status, all the repos within the Publisher’s Docker namespace must:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be public and non-commercial&lt;/li&gt;
  &lt;li&gt;Meet the Open Source Initiative (OSI) definition (shown &lt;a href=&quot;https://opensource.org/docs/osd&quot;&gt;here&lt;/a&gt;), including definitions for free distribution, source code, derived works, integrity of source code, licensing and no tolerance for discrimination&lt;/li&gt;
  &lt;li&gt;Distribute images under &lt;a href=&quot;https://opensource.org/licenses/alphabetical&quot;&gt;OSI approved open source license&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Produce Docker images used to run applications&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wechaty-joined-docker-open-source-program&quot;&gt;Wechaty joined Docker Open Source Program&lt;/h2&gt;

&lt;p&gt;The Wechaty open-source project is very glad to announce that we has been accepted by the &lt;a href=&quot;https://www.docker.com/blog/supporting-open-source-projects-at-docker/&quot;&gt;Docker Open Source Program&lt;/a&gt; today, as one of hundreds of non-profit organizations from the four corners of the world in this program, we will be having supported by the Docker and none of the following egress restrictions will apply to any Docker users pulling images from our approved OSS namespaces:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unauthenticated users will be restricted to 100 pulls every 6 hours&lt;/li&gt;
  &lt;li&gt;Authenticated free users will be restricted to 200 pulls every 6 hours&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;letter-from-docker-to-wechaty&quot;&gt;Letter from Docker to Wechaty&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Welcome to the Docker Open Source Program!  We are very excited to have you as a part of our great community.  We have allow-listed your namespace “Wechaty” and this should come into effect in the next week or so. With this allowed-listing, the Docker data pull rate policies that went into effect last November, will not apply to the users pulling images from your namespace.&lt;/p&gt;

  &lt;p&gt;— Aurelien Suarez, Docker Marketing Team.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Through this program, Docker remains committed to providing a platform where the non-commercial open source developers can continue collaborating, innovating and pushing this industry into new directions.&lt;/p&gt;

&lt;p&gt;Thank you Docker!&lt;/p&gt;

&lt;p&gt;Related links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.docker.com/blog/expanded-support-for-open-source-software-projects/&quot;&gt;Expanded Support for Open Source Software Projects, Marina Kvitnitsky, Nov 02 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.docker.com/blog/supporting-open-source-projects-at-docker/&quot;&gt;Docker Open Source Program&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.docker.com/blog/supporting-open-source-projects-at-docker/&quot;&gt;Supporting Open Source Projects at Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>huan</name></author><category term="announcement" /><category term="docker" /><category term="program" /><category term="news" /><summary type="html">In November, 2020, Docker announced the launch of a special program to expand our support for Open Source projects that use Docker. The eligible projects that meet the program’s requirements (ie. they must be open source and non-commercial) can request to have their respective OSS namespaces allowlisted and see their data-storage and data-egress restrictions lifted.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2021/08-docker-open-source-program/docker-wechaty-osp.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2021/08-docker-open-source-program/docker-wechaty-osp.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">使用 VS Code 调试 Node.js 应用</title><link href="https://wechaty.js.org/2021/08/08/vscode-debug-nodejs/" rel="alternate" type="text/html" title="使用 VS Code 调试 Node.js 应用" /><published>2021-08-08T00:00:00+00:00</published><updated>2021-08-08T00:00:00+00:00</updated><id>https://wechaty.js.org/2021/08/08/vscode-debug-nodejs</id><content type="html" xml:base="https://wechaty.js.org/2021/08/08/vscode-debug-nodejs/">&lt;p&gt;「暑期 2021」活动中，我为 Wechaty 开发命令行环境下的客户端 &lt;a href=&quot;https://github.com/wechaty/cli&quot;&gt;wechaty-cli&lt;/a&gt;，使用 &lt;a href=&quot;https://github.com/chjj/blessed&quot;&gt;blessed&lt;/a&gt; 这个终端图形化组件库可以轻松做出炫酷的仿 IRC 聊天软件，原以为只需调库即可完成任务，但事情远没有那么简单…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-vscode-debug-nodejs/error.webp&quot; alt=&quot;error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在我点击联系人列表时，应用瞬间崩溃，终端上只留下 npm 的常规报错，翻看对应日志也没有任何有效信息，这意味着没有明确的错误关键字可以一步到位地搜索，针对这种问题，我尝试按以下步骤解决：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;直接 Google 项目名称和场景，如 “blessed js crash”，但很可惜并没有任何有效结果，翻遍了 &lt;a href=&quot;https://stackoverflow.com/questions/tagged/blessed&quot;&gt;Stack OverFlow&lt;/a&gt; 上所有 blessed 相关问题都没有和我相同的情况。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;浏览 GitHub 原项目的 Issues 和 Pull Requests，比如我用到了 &lt;a href=&quot;https://github.com/yaronn/blessed-contrib#tree&quot;&gt;blessed-contrib&lt;/a&gt; 中的 Tree 组件，就可以搜索 Tree 相关的讨论，但很可惜仍然没有结果。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;尝试 catch 错误并输出，但因为 blessed 相当于在原来的终端之上加了一层， &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log(error)&lt;/code&gt; 这种常见做法行不通了，而且我也根本不知道在哪 catch。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;找不到报错信息，已经开始怀疑是自己的问题，仔细检查了一遍代码并严格使用 TypeScript 声明了类型，确保与文档描述一致，但错误仍旧。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;寻找使用同一个库同一个组件的代码，与自己的代码相比较，尝试从不同之处上找出崩溃原因所在。但全网使用 Tree 组件的项目半只手都数得过来，而且基本就是沿用了样例代码中实现的 File Explorer，找不出代码的问题。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;自己实在无法解决，可以在各种网站或交流群提问，但即使能提供详细的上下文信息，也不一定有人能够解答，毕竟终端命令行软件本就是小众领域，使用过 blessed 的人更可以说寥寥无几。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;总之，因为 blessed 实在有些冷门而且年久失修，在网络上无法找到所需的信息，我必须要独自面对一个没有人遇到过的问题，可我却连崩溃产生的原因都不清楚。难道我要一行行翻源码，脑补运行过程并人工审计代码？这显然不现实，所以只有通过调试，才能细致入微地理解程序的运行过程，从而找到问题所在。&lt;/p&gt;

&lt;h2 id=&quot;vs-code-调试简介&quot;&gt;VS Code 调试简介&lt;/h2&gt;

&lt;p&gt;VS Code 可能是前端领域现下最流行的开发工具，本文我们就以 VS Code 为例讲解调试的方法。&lt;/p&gt;

&lt;p&gt;作为一个文本编辑器，VS Code 也提供了运行和调试的功能，但和其他一键运行的 IDE 不同，编辑器可不知道要运行何种程序，调试的功能也要安装插件来获得，所以自行配置文件是免不了的。即使是同一种编程语言，开发环境和运行方式上也可能会有差异，网上搜索到的现成配置文件不尽相同，盲目照抄往往会出现各种千奇百怪的报错，如果时间允许推荐阅读&lt;a href=&quot;https://code.visualstudio.com/docs/nodejs/nodejs-debugging&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;如果你此前没有进行过调试运行的配置，只需点击上方菜单栏 -&amp;gt; Run -&amp;gt; Add Configuration，并在弹出的框中选择 Node.js，就会自动在工作区内创建 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vscode/launch.json&lt;/code&gt; 这个文件并打开，生成如下内容：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;IntelliSense&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;learn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;about&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;possible&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;attributes.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Hover&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;descriptions&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;existing&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;attributes.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;For&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;more&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;visit:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;https://go.microsoft.com/fwlink/?linkid=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;830387&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pwa-node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;launch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Launch Program&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;skipFiles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;node_internals&amp;gt;/**&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;program&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${file}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置文件是 JSON 格式，鼠标悬浮到键名上会出现相应的提示，不过参数太多也不一定都用得到，这里我们只关注能让项目运行起来的参数，很明显就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;program&lt;/code&gt; 制定了文件路径，比如我们如果使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node index.js&lt;/code&gt; 启动项目，那么 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;program&lt;/code&gt; 填 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.js&lt;/code&gt; 就可以。&lt;/p&gt;

&lt;p&gt;但我的项目是用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ts-node&lt;/code&gt; 直接运行的，并没有编译好的 js 文件，直接填写 ts 文件明显会失败，于是我 Google 搜索了 “ts-node debug”，出来的前两条结果中的配置文件都过于复杂，添加了很多参数，其实只需要加上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;runtimeExecutable&quot;: &quot;ts-node&quot;&lt;/code&gt; 就够了。&lt;/p&gt;

&lt;p&gt;除了这一种配置，VS Code 还为我们提供了许多配置模板，再次点击 Add Configuration 或者在编辑状态按下 “Ctrl+Space”，会出现一长串配置列表，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node.js: Launch via NPM&lt;/code&gt; 是通过像 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm start&lt;/code&gt; 这样的命令来运行项目的，这样做的好处是具体代码文件位置或名称改动不会影响调试运行。&lt;/p&gt;

&lt;p&gt;不过对于某些需要与用户交互的程序，比如使用 blessed 开发的终端图形界面程序，这样启动默认是在 VS Code 内置的 Debug Console 中执行，无法接受输入，需要添加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console&lt;/code&gt; 属性设为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;integratedTerminal&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;externalTerminal&lt;/code&gt;，分别是在 VS Code 自带的 Terminal 中或用户设置的外部 Terminal 中执行，配置文件如下：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Lanch via NPM&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;launch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;runtimeArgs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;runtimeExecutable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;npm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;skipFiles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;node_internals&amp;gt;/**&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pwa-node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;console&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;integratedTerminal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;细心的小伙伴可能已经发现，上述配置文件的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request&lt;/code&gt; 参数都设置为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launch&lt;/code&gt;，这意味着 VS Code 会直接启动程序并调试，和其他一键运行的 IDE 一样方便，不过有些时候我们仅仅需要调试而不想连带着捆绑启动的配置，所以 VS Code 也提供了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attach&lt;/code&gt; 模式，是对已经打开的程序进行调试。比如模板中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node.js: Attach&lt;/code&gt; 配置如下：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Attach&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9229&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;attach&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;skipFiles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;node_internals&amp;gt;/**&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pwa-node&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;要调试 Node.js 应用程序，只需执行形如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node --inspect-brk program.js&lt;/code&gt; 命令，程序会在默认的 9229 端口等待调试器接入，在 VS Code 中点击开始调试后就会运行。对于用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ts-node&lt;/code&gt; 执行的命令，则要以形如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node --nolazy --inspect-brk=9229 -r ts-node/register program.ts&lt;/code&gt; 的方式运行。&lt;/p&gt;

&lt;p&gt;如果嫌使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--inspect&lt;/code&gt; 参数麻烦，使用模板配置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node.js: Attach by Process ID&lt;/code&gt; 则会自动弹出方框来选择对应正在运行的 Node.js 进程。如果连动动小手选择都不愿意，VS Code 还推出了 &lt;a href=&quot;https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach&quot;&gt;Auto Attach&lt;/a&gt; 功能，按下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+Shift+P&lt;/code&gt; 输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Toggle Auto Attach&lt;/code&gt;，选择 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;smart&lt;/code&gt; 模式，则只需在 VS Code 自带终端中执行 Node.js 程序，无需任何配置，VS Code 就会 Attach 你的程序并进行调试了。&lt;/p&gt;

&lt;h2 id=&quot;栈溢出调试实战&quot;&gt;栈溢出调试实战&lt;/h2&gt;

&lt;p&gt;介绍完了 VS Code 调试的基本配置，就可以来尝试解决文章最初遇到的问题了，直接开始调试并重现崩溃场景，程序退出后 Debug Console 中还能看到错误信息：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;RangeError: Maximum call stack size exceeded
at List.focus (cli/node_modules/blessed/lib/widgets/element.js:329:30)
at Tree.render (cli/node_modules/blessed-contrib/lib/widget/tree.js:152:52)
at cli/node_modules/blessed/lib/widgets/screen.js:738:8
at Array.forEach (&amp;lt;anonymous&amp;gt;)
at Screen.render (cli/node_modules/blessed/lib/widgets/screen.js:735:17)
at reposition (cli/node_modules/blessed/lib/widgets/element.js:968:17)
at Tree._labelScroll (cli/node_modules/blessed/lib/widgets/element.js:972:5)
at Tree._emit (cli/node_modules/blessed/lib/events.js:94:20)
at Tree.emit (cli/node_modules/blessed/lib/events.js:117:12)
at Tree.scroll (cli/node_modules/blessed/lib/widgets/scrollablebox.js:274:17)
at Tree.&amp;lt;anonymous&amp;gt; (cli/node_modules/blessed/lib/widgets/scrollablebox.js:222:8)
at Screen._focus (cli/node_modules/blessed/lib/widgets/screen.js:1680:10)
at Screen.focusPush (cli/node_modules/blessed/lib/widgets/screen.js:1620:8)
at Screen.focused (cli/node_modules/blessed/lib/widgets/screen.js:1697:15)
at List.focus (cli/node_modules/blessed/lib/widgets/element.js:329:30)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一下子就找到了问题的根源，应用本身的代码应该没有问题，而是在 blessed 库内部的代码中产生了无限循环，那么就可以在相应位置设下断点，观察代码执行顺序和变量值的变化，耐心地分析无限循环产生的原因。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-vscode-debug-nodejs/debug.webp&quot; alt=&quot;debug&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如图所示，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tree.js&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tree.prototye.render&lt;/code&gt; 这一函数中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if (this.screen.focused === this.rows) this.rows.focus();&lt;/code&gt; 这一语句可能导致 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tree.render()&lt;/code&gt; 会调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this.rows.focus()&lt;/code&gt;，将鼠标悬浮至 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this.screen.focused&lt;/code&gt; 发现与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this.rows&lt;/code&gt; 为同一对象，这是无限循环上的一个环节，如果注释掉此行再运行便不再有崩溃了。不过此行代码或许起着必要的作用，不敢轻易删除，最终还是更改了应用的代码，在另一处上破坏了循环继续的条件，详情可见 &lt;a href=&quot;https://github.com/wechaty/cli/pull/13&quot;&gt;wechaty/cli#13&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;扩展阅读&quot;&gt;扩展阅读&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/blogs/2018/07/12/introducing-logpoints-and-auto-attach&quot;&gt;Introducing Logpoints and auto-attach&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.barretlee.com/blog/2019/03/18/debugging-in-vscode-tutorial/&quot;&gt;VSCode 调试中 launch.json 配置不完全指南&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.barretlee.com/blog/2015/10/07/debug-nodejs-in-command-line/&quot;&gt;NodeJS的代码调试和性能调优&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/7PNE3nBhpQOTN4stChvWzQ&quot;&gt;写 Node.js 代码，从学会调试开始&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Author:&lt;a href=&quot;https://github.com/chinggg&quot;&gt;@chinggg&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>chinggg</name></author><category term="article" /><category term="tutorial" /><category term="code" /><category term="debug" /><category term="nodejs" /><summary type="html">「暑期 2021」活动中，我为 Wechaty 开发命令行环境下的客户端 wechaty-cli，使用 blessed 这个终端图形化组件库可以轻松做出炫酷的仿 IRC 聊天软件，原以为只需调库即可完成任务，但事情远没有那么简单…</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2021/08-vscode-debug-nodejs/debug.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2021/08-vscode-debug-nodejs/debug.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Google Season of Docs 2021 Mid Term Blog: Tutorials</title><link href="https://wechaty.js.org/2021/08/03/gsod-2021-mid-term-blog-tutorials/" rel="alternate" type="text/html" title="Google Season of Docs 2021 Mid Term Blog: Tutorials" /><published>2021-08-03T00:00:00+00:00</published><updated>2021-08-03T00:00:00+00:00</updated><id>https://wechaty.js.org/2021/08/03/gsod-2021-mid-term-blog-tutorials</id><content type="html" xml:base="https://wechaty.js.org/2021/08/03/gsod-2021-mid-term-blog-tutorials/">&lt;p&gt;This is the mid term blog  for demonstrating all our work that we have done till 8 weeks for creating and improving the &lt;strong&gt;Wechaty Tutorials&lt;/strong&gt; documentation as a part of Google Season of Docs 2021.&lt;/p&gt;

&lt;h2 id=&quot;team-members&quot;&gt;Team members&lt;/h2&gt;

&lt;h3 id=&quot;souvik-biswas-email-sbis1999gmailcom&quot;&gt;Souvik Biswas (email: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sbis1999@gmail.com&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;I am Souvik Biswas, currently pursuing a B.Tech degree in Computer Science and Engineering from IIIT Kalyani in India. I am a freelance technical writer of &lt;a href=&quot;https://blog.codemagic.io/&quot;&gt;Codemagic&lt;/a&gt; and &lt;a href=&quot;https://blog.logrocket.com/&quot;&gt;LogRocket&lt;/a&gt; Blog, and a passionate mobile app developer. You can also find some of my articles on &lt;a href=&quot;https://medium.com/@sbis1999&quot;&gt;Medium&lt;/a&gt;, and explore my projects on &lt;a href=&quot;https://github.com/sbis04&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;shwetal-soni-email-sonishwetal704gmailcom&quot;&gt;Shwetal Soni (email: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sonishwetal704@gmail.com&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;I am Shwetal Soni, currently pursuing B.Tech in Computer Science and Engineering from NIT Hamirpur in India. I am interested in UI/UX Design, Frontend web development and I’m also learning blockchain development. Currently I’m working as Tezos India Fellow.&lt;/p&gt;

&lt;h2 id=&quot;mid-term-video-presentation&quot;&gt;Mid Term Video Presentation&lt;/h2&gt;

&lt;div style=&quot;
    position: relative;
    padding-bottom: 56.25%;
    padding-top:30px;
    height:0;
    overflow:hidden;
&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube.com/embed/STxFTWBHoiw&quot; allowfullscreen=&quot;&quot; webkitallowfullscreen=&quot;&quot; frameborder=&quot;0&quot; style=&quot;
      position: absolute;
      top:0;
      left:0;
      width:100%;
      height:100%;
    &quot;&gt;
&lt;/iframe&gt;

&lt;/div&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Refactor the overall Tutorials documentation&lt;/li&gt;
  &lt;li&gt;Add / improve the step-by-step instructions&lt;/li&gt;
  &lt;li&gt;Add interactive CodeSandbox&lt;/li&gt;
  &lt;li&gt;Screenshots / GIF of the bot running on a device&lt;/li&gt;
  &lt;li&gt;Add various bots building tutorials to Examples&lt;/li&gt;
  &lt;li&gt;Create the Cheat sheet&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;overall-structure-of-tutorials&quot;&gt;Overall structure of Tutorials&lt;/h2&gt;

&lt;p&gt;The overall structure of the Tutorials will be as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Overview&lt;/strong&gt;
Here we can have all the links for each of the pages present in the Tutorials section along with a brief description. This will help the user to easily navigate through the Docs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Quick start&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Overview (containing a brief introduction to each of the sub pages)&lt;/li&gt;
      &lt;li&gt;Running on GitPod&lt;/li&gt;
      &lt;li&gt;Running on Google Cloud Shell&lt;/li&gt;
      &lt;li&gt;Running Locally&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Advanced Usage&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Usage with Docker&lt;/li&gt;
      &lt;li&gt;Usage with Heroku&lt;/li&gt;
      &lt;li&gt;Using Plugin with wechaty&lt;/li&gt;
      &lt;li&gt;Using Redux with wechaty&lt;/li&gt;
      &lt;li&gt;Using Vorpal with wechaty&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Examples&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Overview (introduction to the different types of bot included in this examples section)&lt;/li&gt;
      &lt;li&gt;Basic
        &lt;ul&gt;
          &lt;li&gt;World’s shortest chatbot&lt;/li&gt;
          &lt;li&gt;Contact Bot&lt;/li&gt;
          &lt;li&gt;Ding dong Bot&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Advanced
        &lt;ul&gt;
          &lt;li&gt;Demo Bot&lt;/li&gt;
          &lt;li&gt;Busy Bot&lt;/li&gt;
          &lt;li&gt;Media File Bot&lt;/li&gt;
          &lt;li&gt;Room Bot&lt;/li&gt;
          &lt;li&gt;Friend Bot&lt;/li&gt;
          &lt;li&gt;Gist Bot&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Professional
        &lt;ul&gt;
          &lt;li&gt;Hot Import Bot&lt;/li&gt;
          &lt;li&gt;Ctrl C Signal Bot&lt;/li&gt;
          &lt;li&gt;Monster Bot&lt;/li&gt;
          &lt;li&gt;Api AI Bot&lt;/li&gt;
          &lt;li&gt;Speech to Text Bot&lt;/li&gt;
          &lt;li&gt;Turing Bot&lt;/li&gt;
          &lt;li&gt;Telegram Roger Bot&lt;/li&gt;
          &lt;li&gt;Blessed Twins Bot&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cheat sheet&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Brief description of a bot&lt;/li&gt;
      &lt;li&gt;Code snippet to use it&lt;/li&gt;
      &lt;li&gt;Tech description (in brief)&lt;/li&gt;
      &lt;li&gt;Example - CodeSandbox (maybe included)&lt;/li&gt;
      &lt;li&gt;Screenshots / GIFs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;structure-for-each-tutorial-page&quot;&gt;Structure for each tutorial page&lt;/h2&gt;

&lt;p&gt;A proposed structure of the tutorial documentation is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Introduction&lt;/strong&gt; (also include the goal of the tutorial)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Try out the bot&lt;/strong&gt; (CodeSandbox)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Requirements&lt;/strong&gt; (tools required to follow the tutorial)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Getting started&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Quick introduction to the required tools and how to setup their development environment to get started building the bot&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Building the bot&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Step-by-step guide for building the bot, with a &lt;strong&gt;CodeSandbox&lt;/strong&gt; at the end having minimal code and &lt;em&gt;TODO&lt;/em&gt; steps where users can try building the bot by themselves directly on the documentation page without installing any tools on their local system&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Running the bot&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Commands for running the bot locally&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bot demonstration&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Commands that they can use with the bot, and maybe a GIF showing the invocation of some of the commands on WeChat or WhatsApp&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tasks-completed&quot;&gt;Tasks Completed&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-gsod-2021-mid-term-blog-tutorials/tutorials.webp&quot; alt=&quot;todo-img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-gsod-2021-mid-term-blog-tutorials/tutorials-example.webp&quot; alt=&quot;example-section&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;total-prs&quot;&gt;Total PR’s&lt;/h2&gt;

&lt;p&gt;In total we have submitted 25 PR’s out of which 21 are weekly PR’s as per our weekly tasks. Remaining 4 are minor improvements and bug related PR’s.&lt;/p&gt;

&lt;h3 id=&quot;shwetals-prs&quot;&gt;Shwetal’s PR’s&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Running locally&lt;/strong&gt; &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/pull/888&quot;&gt;#888&lt;/a&gt;: Added tutorial for running ding-dong bot locally&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Overview&lt;/strong&gt; &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/pull/935&quot;&gt;#935&lt;/a&gt; &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/pull/934&quot;&gt;#934&lt;/a&gt;: Added overview for tutorials and getting started&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Gitpod&lt;/strong&gt; &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/pull/923&quot;&gt;#923&lt;/a&gt;: Added tutorial for running ding-dong bot on gitpod&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Plugins&lt;/strong&gt; &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/pull/969&quot;&gt;#969&lt;/a&gt;: Added tutorial for QR code terminal plugin&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Redux&lt;/strong&gt; &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/pull/989&quot;&gt;#989&lt;/a&gt;: Added overview for using redux with wechaty&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;souviks-prs&quot;&gt;Souvik’s PR’s&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Vorpal page&lt;/strong&gt; &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/pull/779&quot;&gt;#779&lt;/a&gt; &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/pull/780&quot;&gt;#780&lt;/a&gt; &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/pull/791&quot;&gt;#791&lt;/a&gt; &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/pull/882&quot;&gt;#882&lt;/a&gt; - Step-by-step guide &amp;amp; CodeSandbox&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Installation page&lt;/strong&gt; &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/pull/905&quot;&gt;#905&lt;/a&gt; - Tools required for running Wechaty&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Google Cloud Shell page&lt;/strong&gt; &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/pull/922&quot;&gt;#922&lt;/a&gt; - Improve the guide&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Plugins section&lt;/strong&gt; &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/pull/957&quot;&gt;#957&lt;/a&gt; &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/pull/963&quot;&gt;#963&lt;/a&gt; &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/pull/985&quot;&gt;#985&lt;/a&gt; - Overview, EventLogger &amp;amp; Heartbeat plugin&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Using Redux with Wechaty&lt;/strong&gt; &lt;a href=&quot;https://github.com/wechaty/wechaty.js.org/pull/1126&quot;&gt;#1126&lt;/a&gt; - Guide for Wechaty Redux plugin in Ducks proposal style&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;challenges&quot;&gt;Challenges&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Understanding git version control&lt;/li&gt;
  &lt;li&gt;Building the first bot using Wechaty
    &lt;ul&gt;
      &lt;li&gt;Knowledge about NPM projects&lt;/li&gt;
      &lt;li&gt;Using plugins&lt;/li&gt;
      &lt;li&gt;Running bot&lt;/li&gt;
      &lt;li&gt;Interacting with the bot from the connected device&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Understanding how to build CodeSandboxes&lt;/li&gt;
  &lt;li&gt;Errors in some bot example codes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tasks-todo&quot;&gt;Tasks todo&lt;/h2&gt;

&lt;p&gt;In upcoming weeks, we have to create tutorial for bots under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;examples/advanced&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;examples/professional&lt;/code&gt; sections. Later we will be preparing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cheet sheet&lt;/code&gt; containing some important code snippets and some plugins. At the end we will review our work right from the start and will refactor it wherever it is required.&lt;/p&gt;</content><author><name>shwetalsoni</name></author><category term="gsod" /><category term="google" /><category term="gsod" /><category term="2021" /><category term="docs" /><category term="tutorials" /><category term="project" /><summary type="html">This is the mid term blog for demonstrating all our work that we have done till 8 weeks for creating and improving the Wechaty Tutorials documentation as a part of Google Season of Docs 2021.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2021/08-gsod-2021-mid-term-blog-tutorials/mid-term-blog-tutorials.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2021/08-gsod-2021-mid-term-blog-tutorials/mid-term-blog-tutorials.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">GSoD’21 Seventh Meeting</title><link href="https://wechaty.js.org/2021/08/01/gsod-2021-seventh-meeting/" rel="alternate" type="text/html" title="GSoD’21 Seventh Meeting" /><published>2021-08-01T00:00:00+00:00</published><updated>2021-08-01T00:00:00+00:00</updated><id>https://wechaty.js.org/2021/08/01/gsod-2021-seventh-meeting</id><content type="html" xml:base="https://wechaty.js.org/2021/08/01/gsod-2021-seventh-meeting/">&lt;h2 id=&quot;google-season-of-docs21-seventh-meeting&quot;&gt;Google Season of Docs’21 seventh meeting&lt;/h2&gt;

&lt;h3 id=&quot;meeting-summary&quot;&gt;Meeting Summary&lt;/h3&gt;

&lt;p&gt;It was the seventh meeting of the GSoD’21 participants. Firstly every participant gave one’s weekly summary and informed the community
 about their plans for the upcoming week, volunteers and tech writers discussed while tech writers were giving their week summaries.
 We discussed contrast levels in the new landing page, and Rajiv helped Sajen troubleshoot an issue. Later we discussed comments and
  questions of the participants, and at last, we took a lovely group photo.&lt;/p&gt;

&lt;div style=&quot;
    position: relative;
    padding-bottom: 56.25%;
    padding-top:30px;
    height:0;
    overflow:hidden;
&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube.com/embed/gGSVsTww6e8&quot; allowfullscreen=&quot;&quot; webkitallowfullscreen=&quot;&quot; frameborder=&quot;0&quot; style=&quot;
      position: absolute;
      top:0;
      left:0;
      width:100%;
      height:100%;
    &quot;&gt;
&lt;/iframe&gt;

&lt;/div&gt;

&lt;h3 id=&quot;attendees&quot;&gt;Attendees&lt;/h3&gt;

&lt;p&gt;Total 12 attendees attended the meeting. They are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rohitesh Jain, Volunteer (UTC + 5:30)&lt;/li&gt;
  &lt;li&gt;Sajen Sarvajith, Reconstruct Landing page writer (UTC + 5:30)&lt;/li&gt;
  &lt;li&gt;Abhishek Jaiswal, How-to-guide section writer (UTC + 05:30)&lt;/li&gt;
  &lt;li&gt;Simin Liao, Volunteer (+8:00)&lt;/li&gt;
  &lt;li&gt;Mukosa Joseph Mawa, Introductions and Explanations section writer (UTC +03:00)&lt;/li&gt;
  &lt;li&gt;Rajiv Ranjan Singh, Improve the gRPC and OpenAPI ecosystem writer, rajivperfect007@gmail.com, (UTC+05:30)&lt;/li&gt;
  &lt;li&gt;Souvik Biswas, Create easy to learn tutorials for beginner users writer, sbis1999@gmail.com (UTC +05:30)&lt;/li&gt;
  &lt;li&gt;Shraddha, Improve References section writer (UTC + 5:30)&lt;/li&gt;
  &lt;li&gt;Shwetal Soni, Create easy to learn tutorials for beginners users writer (UTC +05:30)&lt;/li&gt;
  &lt;li&gt;Arnab Saha, Reconstruction of Landing page with value propositions writer (UTC + 5:30)&lt;/li&gt;
  &lt;li&gt;Chris Estepa,  Introduction and Explanations sections writer (UTC +08:00)&lt;/li&gt;
  &lt;li&gt;Soumi Bardhan, Improve References section writer (UTC + 5:30)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note: Meeting started on schedule, Vasvi missed the meeting&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/08-gsod-2021-seventh-meeting/gsod-seventh-meeting.webp&quot; alt=&quot;Google Season of Docs 2021: Wechaty GSoD'21 Group Photo&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;agendas&quot;&gt;Agendas&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/gGSVsTww6e8&quot;&gt;00:00&lt;/a&gt; 0. Introduction &amp;amp; Welcome&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/gGSVsTww6e8?t=28&quot;&gt;00:28&lt;/a&gt; 1. Discussion with Tutorials team&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/gGSVsTww6e8?t=210&quot;&gt;03:30&lt;/a&gt; 2. Discussion with Introduction and explanation team&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/gGSVsTww6e8?t=265&quot;&gt;04:25&lt;/a&gt; 3. Discussion with Landing page team&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/gGSVsTww6e8?t=822&quot;&gt;13:42&lt;/a&gt; 4. Discussion with References section team&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/gGSVsTww6e8?t=950&quot;&gt;15:50&lt;/a&gt; 5. Discussion with How to guides team&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/gGSVsTww6e8?t=1012&quot;&gt;16:52&lt;/a&gt; 6. Discussion with gRPC team&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/gGSVsTww6e8?t=1080&quot;&gt;18:00&lt;/a&gt; 7. Questions/comments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can learn more from our &lt;a href=&quot;https://docs.google.com/document/d/1fVCk8qRYc4RKGMf2UY5HOe07hEhPUOpGC34v88GEFJg/edit#heading=h.edr3nzd8l43b&quot;&gt;meeting notes&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;meeting-outcomes&quot;&gt;Meeting Outcomes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The community got to know about the progress and plans of the members&lt;/li&gt;
  &lt;li&gt;We had a discussion on landing page contrast, and it’s decided that we will increase the contrast&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;meeting-follow-ups&quot;&gt;Meeting Follow-ups&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Review pending PRs&lt;/li&gt;
&lt;/ul&gt;</content><author><name>rohitesh-kumar-jain</name></author><category term="gsod" /><category term="google" /><category term="gsod" /><category term="event" /><category term="gsod-2021" /><category term="2021" /><category term="zoom" /><category term="docs" /><summary type="html">Google Season of Docs’21 seventh meeting</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2021/08-gsod-2021-seventh-meeting/gsod-seventh-meeting.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2021/08-gsod-2021-seventh-meeting/gsod-seventh-meeting.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Wechaty 社区 &amp;amp; 硬核桃社区：大学生玩转5G消息？So Easy！</title><link href="https://wechaty.js.org/2021/07/30/walnut-5g-press/" rel="alternate" type="text/html" title="Wechaty 社区 &amp;amp; 硬核桃社区：大学生玩转5G消息？So Easy！" /><published>2021-07-30T00:00:00+00:00</published><updated>2021-07-30T00:00:00+00:00</updated><id>https://wechaty.js.org/2021/07/30/walnut-5g-press</id><content type="html" xml:base="https://wechaty.js.org/2021/07/30/walnut-5g-press/">&lt;blockquote&gt;
  &lt;p&gt;近期 硬核桃社区开展了一场面向在校大学生的开发者活动。
硬核桃@钢铁嘉 IronJia、Wechaty@李卓桓、Wechaty@李佳芮一直在活动中指导学生的开发工作。
昨天，传来了他们的最新进展——&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;“&lt;strong&gt;可以收到！&lt;/strong&gt;”&lt;/p&gt;

&lt;p&gt;大二学生张瑞宁和邵琦在硬核桃社区的环境中成功发出了他们的第一条5G消息。&lt;/p&gt;

&lt;p&gt;他们是“&lt;strong&gt;开源软件供应链点亮计划-暑期2021&lt;/strong&gt;”（以下简称 暑期2021）活动中，参与“&lt;strong&gt;5G Chatbot项目&lt;/strong&gt;”开发的两位学生。&lt;/p&gt;

&lt;p&gt;他们是如何与硬核桃、5G消息结缘的呢？&lt;/p&gt;

&lt;p&gt;这要从一场大学生暑期活动说起。&lt;/p&gt;

&lt;h2 id=&quot;01大学生暑期活动&quot;&gt;01.大学生暑期活动&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/07-walnut-5g-press/student.webp&quot; alt=&quot;student&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“暑期2021”（&lt;a href=&quot;https://summer.iscas.ac.cn/&quot;&gt;https://summer.iscas.ac.cn/&lt;/a&gt;），由中科院软件所与 openEuler 社区共同举办。&lt;/p&gt;

&lt;p&gt;旨在鼓励在校学生积极参与开源软件的开发维护，促进国内优秀开源软件社区的蓬勃发展。&lt;/p&gt;

&lt;p&gt;活动联合各大开源社区，针对重要开源软件的开发与维护提供项目，面向全球高校学生开放报名。&lt;/p&gt;

&lt;p&gt;学生可自主选择感兴趣的项目进行申请，中选后可获得该软件资深维护者（社区导师）亲自指导的机会。&lt;/p&gt;

&lt;p&gt;根据项目的难易程度和完成情况，参与者还可获取活动奖金和奖杯。&lt;/p&gt;

&lt;h2 id=&quot;025g-chatbot项目&quot;&gt;02.”5G Chatbot项目”&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/07-walnut-5g-press/walnut-wechaty.webp&quot; alt=&quot;walnut-wechaty&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此次“暑期2021”活动中的“5G Chatbot项目”，是&lt;strong&gt;硬核桃5G消息开发者社区&lt;/strong&gt;(www.5g-msg.com)与&lt;strong&gt;Wechaty社区&lt;/strong&gt;(wechaty.js.org)首次合作，专为大学生开发者倾力打造的暑期项目。&lt;/p&gt;

&lt;p&gt;希望借此机会吸引社会各界关注5G消息行业发展，培养和发掘更多优秀的大学生开发者参与到5G消息行业中来。&lt;/p&gt;

&lt;p&gt;“5G Chatbot项目”期间，硬核桃社区与Wechaty社区保持紧密合作，积极关注项目进展，帮助学生解决开发中遇到的问题，邀请技术大牛进行分享。&lt;/p&gt;

&lt;p&gt;现阶段，两位大学生开发者已经正式投入“5G Chatbot项目”开发，并成功接入硬核桃5G消息开发环境，进行测试。&lt;/p&gt;

&lt;p&gt;两位学生表示，开发中最大的问题就是5G消息在网上的参考资料很少，刚开始上手很难。但是在硬核桃导师 &lt;strong&gt;@钢铁嘉 IronJia&lt;/strong&gt; 的帮助下，问题很快得到了解决。&lt;/p&gt;

&lt;p&gt;在谈到对5G消息的认识时，学生张瑞宁说，“我觉得5G消息的功能非常强大，不仅支持纯文本消息，还支持图片、音频、视频、定位等富媒体消息，&lt;strong&gt;拓展了传统短信业务的功能，而且使用起来非常便捷。&lt;/strong&gt;”&lt;/p&gt;

&lt;p&gt;“&lt;strong&gt;我们认为5G消息具有广阔的应用前景，所以共同选择了这个项目。&lt;/strong&gt; 5G消息是5G时代的生态级应用，基于GSMA RCS和UP标准构建，具备富媒体化、轻量化、交互化等特质。&lt;strong&gt;5G消息实现原生消息界面一站式线上业务体验，能形成更高效益的引流转化，是一种集成程度更高、可代替App的全新人机交互服务模式&lt;/strong&gt;，将给企业客户带来极高的服务价值。”学生邵琦说。&lt;/p&gt;

&lt;h2 id=&quot;03未来更多的开发者活动&quot;&gt;03.未来，更多的开发者活动&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/07-walnut-5g-press/future.webp&quot; alt=&quot;future&quot; /&gt;&lt;/p&gt;

&lt;p&gt;公示的项目报告显示，两位学生从了解接口技术规范，到接入硬核桃环境进行编码和接口测试，再到最后成功进行接收和发送消息的测试&lt;/p&gt;

&lt;p&gt;仅用了短短12天的时间。&lt;/p&gt;

&lt;p&gt;“由于我们开始对服务器不熟悉占用了一些时间，而且暑假了嘛，其他活动也比较多，如果说&lt;strong&gt;实际的代码时间可能也就2个小时&lt;/strong&gt;。”学生邵琦表示。&lt;/p&gt;

&lt;p&gt;短期内，两位学生计划通过 Wechaty 加载 wechaty-puppet-5g-msg 模块，实现一个“ding/dong”功能，接收到文字消息‘ding’时，自动回复消息‘dong’。&lt;/p&gt;

&lt;p&gt;硬核桃导师 &lt;strong&gt;@钢铁嘉 IronJia&lt;/strong&gt; 谈起这次项目过程时说，“学生们对项目非常感兴趣，也非常的积极，技术基础也不错，未来可期。我们也很惊喜，他们可以在这么短的时间内成功使用我们的开发工具，某种程度上也增加了我们对自身产品的信心。希望我们可以帮助更多开发者更好的成长。”&lt;/p&gt;

&lt;p&gt;未来，硬核桃社区还会参与和举办更多开发者活动，打造更多服务5G消息开发者的开发工具。&lt;/p&gt;

&lt;p&gt;欢迎在校师生、Chatbot技术爱好者、各界研究人员参与到5G消息应用的开发中来，共同促进5G消息行业的发展。&lt;/p&gt;

&lt;p&gt;“未来属于青年，希望寄予青年。”&lt;/p&gt;

&lt;p&gt;注：5G Chatbot项目，&lt;a href=&quot;https://wechaty.js.org/2021/07/15/ospp-plan-5g-chatbot-puppet/&quot;&gt;开发支持电信运营商 5G Chatbot/RCS 的 Wechaty 接入 Puppet 模块&lt;/a&gt;，简称 5G Chatbot项目，项目ID：210220088&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;编辑：硬核桃社区&lt;br /&gt;
Source: &lt;a href=&quot;https://mp.weixin.qq.com/s/31qVyvmbHm4wHjeZNovvMg&quot;&gt;硬核桃 Walnut Hardcore&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>lijiarui</name></author><category term="ospp" /><category term="sticky" /><category term="ospp" /><category term="wechaty-puppet-5g" /><category term="ospp-2021" /><category term="china-unicom" /><summary type="html">近期 硬核桃社区开展了一场面向在校大学生的开发者活动。 硬核桃@钢铁嘉 IronJia、Wechaty@李卓桓、Wechaty@李佳芮一直在活动中指导学生的开发工作。 昨天，传来了他们的最新进展——</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2021/07-walnut-5g-press/teaser.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2021/07-walnut-5g-press/teaser.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">零基础小白HOWTO系列 – 搭建第一个基于PadLocal的Python-Wechaty应用</title><link href="https://wechaty.js.org/2021/07/24/newbie-how-to-build-python-wechaty-with-padlocal/" rel="alternate" type="text/html" title="零基础小白HOWTO系列 – 搭建第一个基于PadLocal的Python-Wechaty应用" /><published>2021-07-24T00:00:00+00:00</published><updated>2021-07-24T00:00:00+00:00</updated><id>https://wechaty.js.org/2021/07/24/newbie-how-to-build-python-wechaty-with-padlocal</id><content type="html" xml:base="https://wechaty.js.org/2021/07/24/newbie-how-to-build-python-wechaty-with-padlocal/">&lt;blockquote&gt;
  &lt;p&gt;写在前面：本HowTo系列用来记录个人在Wechaty的学习和研究过程中的点滴经验，希望能帮助更多人避免我踩过的坑，快速熟悉Wechaty这个工具&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;2021年初的时候，在社区上发现了Wechaty项目，由于时间不够充分，没有静下心认真的研究相关内容，加上之前的文档确实不够健全，学习成本很高，一个简单的类似HelloWorld的代码也没有跑通，遂暂时搁置了这个工具的研究。直到最近个人工作上有些需求，需要对公司的微信数据进行管理和社区的自动化运营操作，想起来之前接触的Wechaty工具，就想着再次尝试一下，重新开始学习这个工具。&lt;/p&gt;

&lt;p&gt;欢迎大家在实践本HowTo内容的过程中，将遇到的问题及对应的解决方法发送给我 &lt;a href=&quot;mailto:harrison.gyao@gmail.com&quot;&gt;harrison.gyao@gmail.com&lt;/a&gt; ，我会在收到信息后，及时更新本文档，以帮助更多的人，谢谢你的反馈~！&lt;/p&gt;

&lt;h2 id=&quot;前提要求&quot;&gt;前提要求&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;本文阅读的难度不大，按照文中的标准操作，大概率会能够自主的搭建相应的应用服务环境，并完成一个基本功能的实现。但本文要求读者必须具备基本的编程技能，在服务端领域能够知道RPC（Remote Procedure Call)、Docker的相关基本知识，如果对这方面内容不了解，可以查阅 Reference 的相关部分。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在执行本文中提供的 Gateway 服务脚本时，需要提前确保执行机上的 Docker Daemon 是否正常启动，否则shell脚本执行失败。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;试验环境&quot;&gt;试验环境&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;macOS Ver:11.5&lt;/li&gt;
  &lt;li&gt;Python 3.8&lt;/li&gt;
  &lt;li&gt;Docker desktop (latest)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;内容介绍&quot;&gt;内容介绍&lt;/h2&gt;

&lt;p&gt;本篇Blog会从以下三个方面内容来描述如何快速的能够完成一个最简单的Python-Wechaty应用的搭建，同时对一些过程中可能遇到的问题，进行及时的处理。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;必须掌握的基本知识&lt;/li&gt;
  &lt;li&gt;最简Ding-Dong应用代码&lt;/li&gt;
  &lt;li&gt;过程中遇到过的问题&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;必须掌握的基本知识&quot;&gt;必须掌握的基本知识&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Wechaty的基本结构&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/07-newbie-how-to-build-python-wechaty-with-padlocal/wechaty-architecture.webp&quot; alt=&quot;基本结构&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个结构图例很好的阐述了Wechaty的生态环境架构：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;底层是各个IM工具的通讯协议层，未来可以支持更多IM工具的消息传输，并在这个层级上进行相应的扩充即可。&lt;/li&gt;
  &lt;li&gt;Wechaty Puppet Service Provider 是作为对底层IM协议层的操作控制层作用而设计存在，可以在使用 “Wechaty Puppet Abstract” 通用接口层的设计基础上，忽略底层协议及IM的个性化，提炼共性的操作内容，暴露统一的操作接口给外部调用者。&lt;/li&gt;
  &lt;li&gt;Wechaty （Python、NodeJS等），是基于gRPC框架基础上，在”Wechaty Puppet Abstract”的接口定义约束条件下，通过gRPC的Stub程序完成对底层Provider的掉用。&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Service相关&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wechaty 对于底层IM消息解析和处理，是通过Service Provider 控制的协议层程序来完成相关处理，所以对应不同IM的不同协议内容（如：微信的Pad协议、web协议、mac协议等），需要使用配套的Service Provider来完成对底层IM消息的处理。
目前已经实现的Service Provider有如下几种：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/07-newbie-how-to-build-python-wechaty-with-padlocal/service-provider.webp&quot; alt=&quot;Service Provider&quot; /&gt;&lt;/p&gt;

&lt;p&gt;具体的Service Provider的内容，可以持续关注 &lt;a href=&quot;https://wechaty.js.org/docs/puppet-providers/&quot;&gt;provider docs&lt;/a&gt; 的最新情况。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;关于Token&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;顾名思义，针对微信相关的wechaty服务来说，token需要在Token Gateway的配合下一起使用，是作为当前服务的一个认证接入使用的凭证，用来控制访问准入和时长&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;关于GateWay&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;也就是 Wechaty Puppet Service Token Gateway，在整体架构过程中，通过该Gateway 利用gRPC协议，将制定的 Wechaty Service Provider 的服务封装并转化为 Wechaty Puppet Service，供更上层的业务应用层面的程序调用和使用。&lt;/p&gt;

&lt;p&gt;换句话说，针对与目前版本的 Python-Wechaty ，使用的时候，只能通过Gateway的方式，指定使用 “wechaty-puppet-service” 来完成与业务代码的交互，实现微信数据的操作。&lt;/p&gt;

&lt;h2 id=&quot;最简ding-dong应用代码搭建&quot;&gt;最简Ding-Dong应用代码搭建&lt;/h2&gt;

&lt;h3 id=&quot;gateway-服务准备&quot;&gt;GateWay 服务准备&lt;/h3&gt;

&lt;p&gt;目前Gateway服务是封装在Docker容器中，使用的时候可以直接创建如下shell脚本完成对应容器服务的初始化。读者可以直接copy以下代码，在本地创建一个shell脚本文件后执行即可。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对应shell脚本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```shell script
#!/bin/bash&lt;/p&gt;

&lt;p&gt;export WECHATY_LOG=”verbose” # 如果觉得打印信息太多，可以使用 “error” 级别
export WECHATY_PUPPET=”wechaty-puppet-padlocal”  # 针对当前例子，我们使用padlocal协议作为 Service Provider使用的底层协议 ，这个部分不能错
export WECHATY_PUPPET_PADLOCAL_TOKEN=”puppet_padlocal_xxxxx” # 这里是你自己申请的padlocal Token ，这个部分不能错&lt;/p&gt;

&lt;p&gt;export WECHATY_PUPPET_SERVER_PORT=”8788” # Gateway服务在容器中暴露的本地端口
export WECHATY_TOKEN=”b74d7f7f-cfd0-4def-1c68f0066254” # 使用：import uuid (回车)  print(uuid.uuid4()) 获得的结果&lt;/p&gt;

&lt;p&gt;docker run -ti &lt;br /&gt;
  –name wechaty_puppet_service_token_gateway &lt;br /&gt;
  –rm &lt;br /&gt;
  -e WECHATY_LOG &lt;br /&gt;
  -e WECHATY_PUPPET &lt;br /&gt;
  -e WECHATY_PUPPET_PADLOCAL_TOKEN &lt;br /&gt;
  -e WECHATY_PUPPET_SERVER_PORT &lt;br /&gt;
  -e WECHATY_TOKEN &lt;br /&gt;
  -p “$WECHATY_PUPPET_SERVER_PORT:$WECHATY_PUPPET_SERVER_PORT” &lt;br /&gt;
  wechaty/wechaty&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
以上shell脚本编写完成后，可以直接在本地的Term或Console中进行执行，如果过程中遇到有关docker的问题，请自行&quot;谷歌&quot;寻找相应的解决方法。

- 结果检查

1. 通过执行 ``` netstat -an |grep 8788 ``` 命令检查相应脚本中8788端口是否已经被监听

1. 访问 &amp;lt;https://api.chatie.io/v0/hosties/${uuid4}&amp;gt; 地址（注意：${uuid4} 是一个占位符，实际访问的时候，需要将该位置替换为shell脚本中&quot;WECHATY_TOKEN&quot;环境变量使用的uuid字符串），如果服务**正常**，可以看到类似

``` json
{
    &quot;host&quot;: &quot;122.233.170.88&quot;,
    &quot;port&quot;: 8788
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;的显示内容。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;查看服务启动日志信息&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/07-newbie-how-to-build-python-wechaty-with-padlocal/gateway-service-1.webp&quot; alt=&quot;Gateway启动日志&quot; /&gt;&lt;/p&gt;

&lt;p&gt;正如上面的截图，是首次正确启动service gateway的时候的服务日志，尤其关注截图中红框部分，如果看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PuppetServer start()&lt;/code&gt;以及&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[PuppetPadlocal] start login with type: QrLogin&lt;/code&gt;，说明服务已经正常启动。&lt;/p&gt;

&lt;p&gt;经过上面几步的检查，如果没有其他问题，你当前的服务已经启动成功，并完成token的服务注册，可以正常接受业务层传递的操作信息。如果此时查看gateway的日志，找到类似&lt;/p&gt;

&lt;p&gt;```shell script
Online QR Code Image: https://wechaty.js.org/qrcode/http%3A%2F%2Fweixin.qq.com%2Fx%2FgYEttTm04jj2_EtvmXmq&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
信息时，可以直接访问对应的链接，扫码后即可完成微信账号的Pad登录，并且在微信中，可以看到如下图的登录状态显示。

![微信登录设备列表](/assets/2021/07-newbie-how-to-build-python-wechaty-with-padlocal/wechat-logged-device-list.webp)

### Ding-Dong 代码编写

```python
# coding=utf-8
&quot;&quot;&quot;
# @Licensed : (C) Copyright
# @Time     : 2021/7/24 上午11:38
# @Author   : Harrison Yao
# @FILE     : WechatGroupBot.py
# @Version  : 
# @Function : 
# @Requirements:
&quot;&quot;&quot;

import logging,asyncio,os
from typing import Optional, Union
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from wechaty import Wechaty, Message, ScanStatus, Contact, Room, Image, UrlLink
from wechaty.plugin import WechatyPlugin
from wechaty_puppet import FileBox, UrlLinkPayload, MessagePayload  # 发送文件， 发送链接， 消息

os.environ['WECHATY_LOG_FILE_KEY'] = '一个日志文件的绝对路径'  # 如果不指定，会自动在执行程序的位置生成logs目录和根据日期时间为命名的日志文件
LOG_FORMAT = &quot;%(asctime)s - %(levelname)s - %(message)s&quot;
logging.basicConfig(filename='../logs/wechaty_run_server_error.log', format=LOG_FORMAT, level=logging.INFO )


class MyBot(Wechaty):

    async def on_scan(self, qr_code: str, status: ScanStatus,
                      data: Optional[str] = None):
        &quot;&quot;&quot;监听微信扫码登录, 微信扫码的链接&quot;&quot;&quot;
        print(&quot;https://wechaty.js.org/qrcode/{}&quot;.format(qr_code))

    async def on_login(self, contact: Contact):
        &quot;&quot;&quot;监听微信扫码登录的用户信息&quot;&quot;&quot;
        contact_info = contact.payload
        print(&quot;扫码登录的用户信息: {}&quot;.format(contact_info.name))

    async def on_ready(self, _):
        # find by id
        # 1. get all of friends
        &quot;&quot;&quot;
        我是在这里读取的好友信息
        &quot;&quot;&quot;
        pass

    async def on_message(self, msg: Message):
        &quot;&quot;&quot;监听微信消息&quot;&quot;&quot;
        print(&quot;监听接受到的消息业务处理: {}&quot;.format(msg.text()))
        from_contact: Optional[Contact] = msg.talker()
        text = msg.text()
        room: Optional[Room] = msg.room()
        if text.lower() == 'ding':
            conversation: Union[
                Room, Contact] = from_contact if room is None else room
            await conversation.ready()
            await conversation.say('[自动回复] dong')
            file_box = FileBox.from_url(
                'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/'
                'u=1116676390,2305043183&amp;amp;fm=26&amp;amp;gp=0.webp',
                name='ding-dong.webp')
            await conversation.say(file_box)


class BotPlugin(WechatyPlugin):
    @property
    def name(self) -&amp;gt; str:
        &quot;&quot;&quot;get the name of the plugin&quot;&quot;&quot;
        return '智能客服'

    async def tick(self):
        &quot;&quot;&quot;send message  plugin scheduler&quot;&quot;&quot;
        pass


    async def init_plugin(self, wechaty: Wechaty):
        &quot;&quot;&quot;init plugin&quot;&quot;&quot;
        await super().init_plugin(wechaty)
        scheduler = AsyncIOScheduler()
        scheduler.add_job(self.tick, 'cron')
        scheduler.start()


async def main():
    &quot;&quot;&quot;
    Async Main Entry
    &quot;&quot;&quot;
    bot = MyBot()
    bot._options.puppet = &quot;wechaty-puppet-service&quot;  # python-wechaty 只能使用基于gRPC的 service provider
    bot._options.puppet_options.token = &quot;puppet_padlocal_xxxxx&quot;  # 使用你自己申请的PadLocal Token
    bot._options.puppet_options.end_point = &quot;127.0.0.1:9001&quot;  # 这里一定要注意端口和gateway service启动时指定的端口保持一致
    bot.use(BotPlugin())

    await bot.start()

asyncio.run(main())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在使用相关代码前，各位自行安装对应的依赖库，这里就不赘述了。&lt;/p&gt;

&lt;h2 id=&quot;过程中遇到的问题概览&quot;&gt;过程中遇到的问题概览&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;本地环境网络代理引发的问题&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在一开始的尝试过程中，由于本人习惯于系统开机后就自动架梯，以实现随时随地的科学上网需求，所以也没做过太多网络层的关注和检查，在启动Gateway Service时，发现 Wechaty Puppet Service 始终无法完成初始化，无法看到日志中的登录二维码链接地址或用户登录成功的信息，取而代之的是一系列心跳检查和服务状态的切换，情况如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021/07-newbie-how-to-build-python-wechaty-with-padlocal/gateway-firewall-issue.webp&quot; alt=&quot;微信登录设备列表&quot; /&gt;&lt;/p&gt;

&lt;p&gt;过程中，始终只是有心跳检查的日志信息，但没有其他登录成功信息或者初次登录时的扫码信息，所以怀疑是网络层的问题导致部分数据没有正常发送和处理造成，同时联想到以前自己在手机上安装代理软件进行网络抓包时很多应用基于SSL安全双向校验的问题，会导致应用网络请求失败的案例，猜测是否是本机的网络代理设置导致 gateway 与 微信服务 之间的pad协议请求无法正常处理，导致微信服务操作异常，随后关闭本地的代理服务后重新启动gateway服务以及python代码，问题解除。&lt;/p&gt;

&lt;h2 id=&quot;特别致谢&quot;&gt;特别致谢&lt;/h2&gt;

&lt;p&gt;本文档所述试验过程中，得到了如下几位同学的支持，再次特别提出感谢：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;微信名：秋客&lt;/li&gt;
  &lt;li&gt;微信名：Wyx&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/187560185&quot;&gt;RPC科普&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/187505981&quot;&gt;Docker科普&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wechaty.js.org/docs/specs/token&quot;&gt;https://wechaty.js.org/docs/specs/token&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wechaty.js.org/2021/01/14/wechaty-puppet-service/&quot;&gt;https://wechaty.js.org/2021/01/14/wechaty-puppet-service/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wechaty.js.org/docs/puppet-services/&quot;&gt;https://wechaty.js.org/docs/puppet-services/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>harrisonyao</name></author><category term="article" /><category term="blog" /><category term="newbie" /><category term="howto" /><category term="python" /><summary type="html">写在前面：本HowTo系列用来记录个人在Wechaty的学习和研究过程中的点滴经验，希望能帮助更多人避免我踩过的坑，快速熟悉Wechaty这个工具</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://wechaty.js.org/assets/2021/07-newbie-how-to-build-python-wechaty-with-padlocal/rare-book.webp" /><media:content medium="image" url="https://wechaty.js.org/assets/2021/07-newbie-how-to-build-python-wechaty-with-padlocal/rare-book.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>